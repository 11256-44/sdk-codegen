// 234 API models: 181 Spec, 0 Request, 53 Write
#nullable enable
using System;
using Looker.RTL;
using Url = System.String;
using Password = System.String;
// ReSharper disable InconsistentNaming

/// NOTE: Do not edit this file generated by Looker SDK Codegen for Looker 7.10 API 4.0

namespace Looker.SDK.API40 
{


public class AccessToken : SdkModel 
{
  /// Access Token used for API calls (read-only)
  public string? access_token { get; set; } = null;
  /// Type of Token (read-only)
  public string? token_type { get; set; } = null;
  /// Number of seconds before the token expires (read-only)
  public long? expires_in { get; set; } = null;
  /// Refresh token which can be used to obtain a new access token (read-only)
  public string? refresh_token { get; set; } = null;
}

public class ApiSession : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The id of active workspace for this session
  public string? workspace_id { get; set; } = null;
  /// The id of the actual user in the case when this session represents one user sudo'ing as another (read-only)
  public long? sudo_user_id { get; set; } = null;
}

public class ApiVersion : SdkModel 
{
  /// Current Looker release version number (read-only)
  public string? looker_release_version { get; set; } = null;
  public ApiVersionElement? current_version { get; set; }
  /// Array of versions supported by this Looker instance (read-only)
  public ApiVersionElement[]? supported_versions { get; set; } = null;
}

public class ApiVersionElement : SdkModel 
{
  /// Version number as it appears in '/api/xxx/' urls (read-only)
  public string? version { get; set; } = null;
  /// Full version number including minor version (read-only)
  public string? full_version { get; set; } = null;
  /// Status of this version (read-only)
  public string? status { get; set; } = null;
  /// Url for swagger.json for this version (read-only)
  public Url? swagger_url { get; set; } = null;
}

public class BackupConfiguration : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Type of backup: looker-s3 or custom-s3
  public string? type { get; set; } = null;
  /// Name of bucket for custom-s3 backups
  public string? custom_s3_bucket { get; set; } = null;
  /// Name of region where the bucket is located
  public string? custom_s3_bucket_region { get; set; } = null;
  /// (Write-Only) AWS S3 key used for custom-s3 backups
  public string? custom_s3_key { get; set; } = null;
  /// (Write-Only) AWS S3 secret used for custom-s3 backups
  public string? custom_s3_secret { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class Board : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of associated content_metadata record (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Date of board creation (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Date of board deletion
  public DateTime? deleted_at { get; set; } = null;
  /// Description of the board
  public string? description { get; set; } = null;
  /// Sections of the board (read-only)
  public BoardSection[]? board_sections { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// ids of the board sections in the order they should be displayed
  public long[]? section_order { get; set; } = null;
  /// Title of the board
  public string? title { get; set; } = null;
  /// Date of last board update (read-only)
  public DateTime? updated_at { get; set; } = null;
  /// User id of board creator (read-only)
  public long? user_id { get; set; } = null;
  /// Whether the board is the primary homepage or not (read-only)
  public bool? primary_homepage { get; set; } = null;
}

public class BoardItem : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of user who created the content this item is based on (read-only)
  public string? content_created_by { get; set; } = null;
  /// Content favorite id associated with the item this content is based on (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Content metadata id associated with the item this content is based on (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Last time the content that this item is based on was updated (read-only)
  public string? content_updated_at { get; set; } = null;
  /// Dashboard to base this item on
  public long? dashboard_id { get; set; } = null;
  /// The actual description for display (read-only)
  public string? description { get; set; } = null;
  /// Number of times content has been favorited, if present (read-only)
  public long? favorite_count { get; set; } = null;
  /// Associated Board Section
  public long? board_section_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// The container folder name of the content (read-only)
  public string? location { get; set; } = null;
  /// Look to base this item on
  public long? look_id { get; set; } = null;
  /// LookML Dashboard to base this item on
  public string? lookml_dashboard_id { get; set; } = null;
  /// An arbitrary integer representing the sort order within the section
  public long? order { get; set; } = null;
  /// The actual title for display (read-only)
  public string? title { get; set; } = null;
  /// Relative url for the associated content (read-only)
  public string? url { get; set; } = null;
  /// Number of times content has been viewed, if present (read-only)
  public long? view_count { get; set; } = null;
}

public class BoardSection : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Time at which this section was created. (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Time at which this section was deleted.
  public DateTime? deleted_at { get; set; } = null;
  /// Description of the content found in this section.
  public string? description { get; set; } = null;
  /// Id reference to parent board
  public long? board_id { get; set; } = null;
  /// Items in the board section (read-only)
  public BoardItem[]? board_items { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// ids of the board items in the order they should be displayed
  public long[]? item_order { get; set; } = null;
  /// Name of row
  public string? title { get; set; } = null;
  /// Time at which this section was last updated. (read-only)
  public DateTime? updated_at { get; set; } = null;
}

public class ColorCollection : SdkModel 
{
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Label of color collection
  public string? label { get; set; } = null;
  /// Array of categorical palette definitions
  public DiscretePalette[]? categoricalPalettes { get; set; } = null;
  /// Array of discrete palette definitions
  public ContinuousPalette[]? sequentialPalettes { get; set; } = null;
  /// Array of diverging palette definitions
  public ContinuousPalette[]? divergingPalettes { get; set; } = null;
}

public class ColorStop : SdkModel 
{
  /// CSS color string
  public string? color { get; set; } = null;
  /// Offset in continuous palette (0 to 100)
  public long? offset { get; set; } = null;
}

public class Command : SdkModel 
{
  /// Id of the command record (read-only)
  public long? id { get; set; } = null;
  /// Id of the command author (read-only)
  public long? author_id { get; set; } = null;
  /// Name of the command
  public string? name { get; set; } = null;
  /// Description of the command
  public string? description { get; set; } = null;
  /// Id of the content associated with the command
  public string? linked_content_id { get; set; } = null;
  /// Name of the command Valid values are: "dashboard", "lookml_dashboard".
  public string? linked_content_type { get; set; } = null;
}

public class ContentFavorite : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// User Id which owns this ContentFavorite
  public long? user_id { get; set; } = null;
  /// Content Metadata Id associated with this ContentFavorite
  public long? content_metadata_id { get; set; } = null;
  /// Id of a look (read-only)
  public long? look_id { get; set; } = null;
  /// Id of a dashboard (read-only)
  public long? dashboard_id { get; set; } = null;
  public LookBasic? look { get; set; }
  public DashboardBase? dashboard { get; set; }
  /// Id of a board (read-only)
  public long? board_id { get; set; } = null;
}

public class ContentMeta : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Name or title of underlying content (read-only)
  public string? name { get; set; } = null;
  /// Id of Parent Content (read-only)
  public long? parent_id { get; set; } = null;
  /// Id of associated dashboard when content_type is "dashboard" (read-only)
  public string? dashboard_id { get; set; } = null;
  /// Id of associated look when content_type is "look" (read-only)
  public long? look_id { get; set; } = null;
  /// Id of associated folder when content_type is "space" (read-only)
  public string? folder_id { get; set; } = null;
  /// Content Type ("dashboard", "look", or "folder") (read-only)
  public string? content_type { get; set; } = null;
  /// Whether content inherits its access levels from parent
  public bool? inherits { get; set; } = null;
  /// Id of Inherited Content (read-only)
  public long? inheriting_id { get; set; } = null;
  /// Content Slug (read-only)
  public string? slug { get; set; } = null;
}

public class ContentMetaGroupUser : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of associated Content Metadata (read-only)
  public string? content_metadata_id { get; set; } = null;
  /// Type of permission: "view" or "edit" Valid values are: "view", "edit". (read-only)
  public string? permission_type { get; set; } = null;
  /// ID of associated group (read-only)
  public long? group_id { get; set; } = null;
  /// ID of associated user (read-only)
  public long? user_id { get; set; } = null;
}

public class ContentValidation : SdkModel 
{
  /// A list of content errors (read-only)
  public ContentValidatorError[]? content_with_errors { get; set; } = null;
  /// Duration of content validation in seconds (read-only)
  public float? computation_time { get; set; } = null;
  /// The number of looks validated (read-only)
  public long? total_looks_validated { get; set; } = null;
  /// The number of dashboard elements validated (read-only)
  public long? total_dashboard_elements_validated { get; set; } = null;
  /// The number of dashboard filters validated (read-only)
  public long? total_dashboard_filters_validated { get; set; } = null;
  /// The number of scheduled plans validated (read-only)
  public long? total_scheduled_plans_validated { get; set; } = null;
  /// The number of explores used across all content validated (read-only)
  public long? total_explores_validated { get; set; } = null;
}

public class ContentValidationDashboard : SdkModel 
{
  /// Description
  public string? description { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  public ContentValidationFolder? folder { get; set; }
  /// Dashboard Title
  public string? title { get; set; } = null;
}

public class ContentValidationDashboardElement : SdkModel 
{
  /// Text tile body text
  public string? body_text { get; set; } = null;
  /// Id of Dashboard
  public string? dashboard_id { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id Of Look
  public string? look_id { get; set; } = null;
  /// Note Display
  public string? note_display { get; set; } = null;
  /// Note State
  public string? note_state { get; set; } = null;
  /// Note Text
  public string? note_text { get; set; } = null;
  /// Note Text as Html (read-only)
  public string? note_text_as_html { get; set; } = null;
  /// Id Of Query
  public long? query_id { get; set; } = null;
  /// Text tile subtitle text
  public string? subtitle_text { get; set; } = null;
  /// Title of dashboard element
  public string? title { get; set; } = null;
  /// Whether title is hidden
  public bool? title_hidden { get; set; } = null;
  /// Text tile title
  public string? title_text { get; set; } = null;
  /// Type
  public string? type { get; set; } = null;
}

public class ContentValidationDashboardFilter : SdkModel 
{
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of Dashboard (read-only)
  public string? dashboard_id { get; set; } = null;
  /// Name of filter
  public string? name { get; set; } = null;
  /// Title of filter
  public string? title { get; set; } = null;
  /// Type of filter: one of date, number, string, or field
  public string? type { get; set; } = null;
  /// Default value of filter
  public string? default_value { get; set; } = null;
  /// Model of filter (required if type = field)
  public string? model { get; set; } = null;
  /// Explore of filter (required if type = field)
  public string? explore { get; set; } = null;
  /// Dimension of filter (required if type = field)
  public string? dimension { get; set; } = null;
}

public class ContentValidationError : SdkModel 
{
  /// Error message (read-only)
  public string? message { get; set; } = null;
  /// Name of the field involved in the error (read-only)
  public string? field_name { get; set; } = null;
  /// Name of the model involved in the error (read-only)
  public string? model_name { get; set; } = null;
  /// Name of the explore involved in the error (read-only)
  public string? explore_name { get; set; } = null;
  /// Whether this validation error is removable (read-only)
  public bool? removable { get; set; } = null;
}

public class ContentValidationFolder : SdkModel 
{
  /// Unique Name
  public string name { get; set; } = "";
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
}

public class ContentValidationLook : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Look Title
  public string? title { get; set; } = null;
  public ContentValidationFolder? folder { get; set; }
}

public class ContentValidationScheduledPlan : SdkModel 
{
  /// Name of this scheduled plan
  public string? name { get; set; } = null;
  /// Id of a look
  public long? look_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
}

public class ContentValidatorError : SdkModel 
{
  public ContentValidationLook? look { get; set; }
  public ContentValidationDashboard? dashboard { get; set; }
  public ContentValidationDashboardElement? dashboard_element { get; set; }
  public ContentValidationDashboardFilter? dashboard_filter { get; set; }
  public ContentValidationScheduledPlan? scheduled_plan { get; set; }
  /// A list of errors found for this piece of content (read-only)
  public ContentValidationError[]? errors { get; set; } = null;
  /// An id unique to this piece of content for this validation run (read-only)
  public string? id { get; set; } = null;
}

public class ContentView : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Id of viewed Look (read-only)
  public long? look_id { get; set; } = null;
  /// Id of the viewed Dashboard (read-only)
  public long? dashboard_id { get; set; } = null;
  /// Content metadata id of the Look or Dashboard (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Id of user content was viewed by (read-only)
  public long? user_id { get; set; } = null;
  /// Id of group content was viewed by (read-only)
  public long? group_id { get; set; } = null;
  /// Number of times piece of content was viewed (read-only)
  public long? view_count { get; set; } = null;
  /// Number of times piece of content was favorited (read-only)
  public long? favorite_count { get; set; } = null;
  /// Date the piece of content was last viewed (read-only)
  public string? last_viewed_at { get; set; } = null;
  /// Week start date for the view and favorite count during that given week (read-only)
  public string? start_of_week_date { get; set; } = null;
}

public class ContinuousPalette : SdkModel 
{
  /// Unique identity string (read-only)
  public string? id { get; set; } = null;
  /// Label for palette
  public string? label { get; set; } = null;
  /// Type of palette
  public string? type { get; set; } = null;
  /// Array of ColorStops in the palette
  public ColorStop[]? stops { get; set; } = null;
}

public class CreateDashboardFilter : SdkModel 
{
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of Dashboard
  public string dashboard_id { get; set; } = "";
  /// Name of filter
  public string name { get; set; } = "";
  /// Title of filter
  public string title { get; set; } = "";
  /// Type of filter: one of date, number, string, or field
  public string type { get; set; } = "";
  /// Default value of filter
  public string? default_value { get; set; } = null;
  /// Model of filter (required if type = field)
  public string? model { get; set; } = null;
  /// Explore of filter (required if type = field)
  public string? explore { get; set; } = null;
  /// Dimension of filter (required if type = field)
  public string? dimension { get; set; } = null;
  /// Field information (read-only)
  public StringDictionary<object>? field { get; set; } = null;
  /// Display order of this filter relative to other filters
  public long? row { get; set; } = null;
  /// Array of listeners for faceted filters
  public string[]? listens_to_filters { get; set; } = null;
  /// Whether the filter allows multiple filter values
  public bool? allow_multiple_values { get; set; } = null;
  /// Whether the filter requires a value to run the dashboard
  public bool? required { get; set; } = null;
  /// The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  public StringDictionary<object>? ui_config { get; set; } = null;
}

public class CreateDashboardRenderTask : SdkModel 
{
  /// Filter values to apply to the dashboard queries, in URL query format
  public string? dashboard_filters { get; set; } = null;
  /// Dashboard layout style: single_column or tiled
  public string? dashboard_style { get; set; } = null;
}

public class CreateFolder : SdkModel 
{
  /// Unique Name
  public string name { get; set; } = "";
  /// Id of Parent. If the parent id is null, this is a root-level entry
  public string parent_id { get; set; } = "";
}

public class CreateQueryTask : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of query to run
  public long query_id { get; set; }
  /// Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
  public string result_format { get; set; } = "";
  /// Source of query task
  public string? source { get; set; } = null;
  /// Create the task but defer execution
  public bool? deferred { get; set; } = null;
  /// Id of look associated with query.
  public long? look_id { get; set; } = null;
  /// Id of dashboard associated with query.
  public string? dashboard_id { get; set; } = null;
}

public class CredentialsApi3 : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// API key client_id (read-only)
  public string? client_id { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsEmail : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// EMail address used for user login
  public string? email { get; set; } = null;
  /// Force the user to change their password upon their next login
  public bool? forced_password_reset_at_next_login { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// Url with one-time use secret token that the user can use to reset password (read-only)
  public string? password_reset_url { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
  /// Link to get this user (read-only)
  public Url? user_url { get; set; } = null;
}

public class CredentialsEmbed : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// Embedder's id for a group to which this user was added during the most recent login (read-only)
  public string? external_group_id { get; set; } = null;
  /// Embedder's unique id for the user (read-only)
  public string? external_user_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsGoogle : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// Google domain (read-only)
  public string? domain { get; set; } = null;
  /// EMail address (read-only)
  public string? email { get; set; } = null;
  /// Google's Unique ID for this user (read-only)
  public string? google_user_id { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsLDAP : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// EMail address (read-only)
  public string? email { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// LDAP Distinguished name for this user (as-of the last login) (read-only)
  public string? ldap_dn { get; set; } = null;
  /// LDAP Unique ID for this user (read-only)
  public string? ldap_id { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsLookerOpenid : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// EMail address used for user login (read-only)
  public string? email { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// IP address of client for most recent login using credential (read-only)
  public string? logged_in_ip { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
  /// Link to get this user (read-only)
  public Url? user_url { get; set; } = null;
}

public class CredentialsOIDC : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// EMail address (read-only)
  public string? email { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// OIDC OP's Unique ID for this user (read-only)
  public string? oidc_user_id { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsSaml : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// EMail address (read-only)
  public string? email { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Timestamp for most recent login using credential (read-only)
  public string? logged_in_at { get; set; } = null;
  /// Saml IdP's Unique ID for this user (read-only)
  public string? saml_user_id { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CredentialsTotp : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for the creation of this credential (read-only)
  public string? created_at { get; set; } = null;
  /// Has this credential been disabled? (read-only)
  public bool? is_disabled { get; set; } = null;
  /// Short name for the type of this kind of credential (read-only)
  public string? type { get; set; } = null;
  /// User has verified (read-only)
  public bool? verified { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class CustomWelcomeEmail : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// If true, custom email content will replace the default body of welcome emails
  public bool? enabled { get; set; } = null;
  /// The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.
  public string? content { get; set; } = null;
  /// The text to appear in the email subject line.
  public string? subject { get; set; } = null;
  /// The text to appear in the header line of the email body.
  public string? header { get; set; } = null;
}

public class Dashboard : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Content Favorite Id (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Description
  public string? description { get; set; } = null;
  /// Is Hidden
  public bool? hidden { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  public LookModel? model { get; set; }
  /// Timezone in which the Dashboard will run by default.
  public string? query_timezone { get; set; } = null;
  /// Is Read-only (read-only)
  public bool? @readonly { get; set; } = null;
  /// Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
  public string? refresh_interval { get; set; } = null;
  /// Refresh Interval in milliseconds (read-only)
  public long? refresh_interval_to_i { get; set; } = null;
  public FolderBase? folder { get; set; }
  /// Dashboard Title
  public string? title { get; set; } = null;
  /// Id of User (read-only)
  public long? user_id { get; set; } = null;
  /// Background color
  public string? background_color { get; set; } = null;
  /// Time that the Dashboard was created. (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Enables crossfiltering in dashboards - only available in dashboards-next (beta)
  public bool? crossfilter_enabled { get; set; } = null;
  /// Elements (read-only)
  public DashboardElement[]? dashboard_elements { get; set; } = null;
  /// Filters (read-only)
  public DashboardFilter[]? dashboard_filters { get; set; } = null;
  /// Layouts (read-only)
  public DashboardLayout[]? dashboard_layouts { get; set; } = null;
  /// Whether or not a dashboard is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// Time that the Dashboard was 'soft' deleted. (read-only)
  public DateTime? deleted_at { get; set; } = null;
  /// Id of User that 'soft' deleted the dashboard. (read-only)
  public long? deleter_id { get; set; } = null;
  /// Relative path of URI of LookML file to edit the dashboard (LookML dashboard only). (read-only)
  public Url? edit_uri { get; set; } = null;
  /// Number of times favorited (read-only)
  public long? favorite_count { get; set; } = null;
  /// Time the dashboard was last accessed (read-only)
  public DateTime? last_accessed_at { get; set; } = null;
  /// Time last viewed in the Looker web UI (read-only)
  public DateTime? last_viewed_at { get; set; } = null;
  /// configuration option that governs how dashboard loading will happen.
  public string? load_configuration { get; set; } = null;
  /// Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
  public string? lookml_link_id { get; set; } = null;
  /// Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)
  public bool? show_filters_bar { get; set; } = null;
  /// Show title
  public bool? show_title { get; set; } = null;
  /// Content Metadata Slug
  public string? slug { get; set; } = null;
  /// Id of folder
  public string? folder_id { get; set; } = null;
  /// Color of text on text tiles
  public string? text_tile_text_color { get; set; } = null;
  /// Tile background color
  public string? tile_background_color { get; set; } = null;
  /// Tile text color
  public string? tile_text_color { get; set; } = null;
  /// Title color
  public string? title_color { get; set; } = null;
  /// Number of times viewed in the Looker web UI (read-only)
  public long? view_count { get; set; } = null;
  public DashboardAppearance? appearance { get; set; }
  /// The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
  public string? preferred_viewer { get; set; } = null;
}

public class DashboardAggregateTableLookml : SdkModel 
{
  /// Dashboard Id (read-only)
  public string? dashboard_id { get; set; } = null;
  /// Aggregate Table LookML (read-only)
  public string? aggregate_table_lookml { get; set; } = null;
}

public class DashboardAppearance : SdkModel 
{
  /// Page margin (side) width
  public long? page_side_margins { get; set; } = null;
  /// Background color for the dashboard
  public string? page_background_color { get; set; } = null;
  /// Title alignment on dashboard tiles
  public string? tile_title_alignment { get; set; } = null;
  /// Space between tiles
  public long? tile_space_between { get; set; } = null;
  /// Background color for tiles
  public string? tile_background_color { get; set; } = null;
  /// Tile shadow on/off
  public bool? tile_shadow { get; set; } = null;
  /// Key color
  public string? key_color { get; set; } = null;
}

public class DashboardBase : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Content Favorite Id (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Description (read-only)
  public string? description { get; set; } = null;
  /// Is Hidden (read-only)
  public bool? hidden { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  public LookModel? model { get; set; }
  /// Timezone in which the Dashboard will run by default. (read-only)
  public string? query_timezone { get; set; } = null;
  /// Is Read-only (read-only)
  public bool? @readonly { get; set; } = null;
  /// Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds. (read-only)
  public string? refresh_interval { get; set; } = null;
  /// Refresh Interval in milliseconds (read-only)
  public long? refresh_interval_to_i { get; set; } = null;
  public FolderBase? folder { get; set; }
  /// Dashboard Title (read-only)
  public string? title { get; set; } = null;
  /// Id of User (read-only)
  public long? user_id { get; set; } = null;
}

public class DashboardElement : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Text tile body text
  public string? body_text { get; set; } = null;
  /// Text tile body text as Html (read-only)
  public string? body_text_as_html { get; set; } = null;
  /// Id of Dashboard
  public string? dashboard_id { get; set; } = null;
  /// Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only). (read-only)
  public Url? edit_uri { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  public LookWithQuery? look { get; set; }
  /// Id Of Look
  public string? look_id { get; set; } = null;
  /// LookML link ID (read-only)
  public string? lookml_link_id { get; set; } = null;
  /// ID of merge result
  public string? merge_result_id { get; set; } = null;
  /// Note Display
  public string? note_display { get; set; } = null;
  /// Note State
  public string? note_state { get; set; } = null;
  /// Note Text
  public string? note_text { get; set; } = null;
  /// Note Text as Html (read-only)
  public string? note_text_as_html { get; set; } = null;
  public Query? query { get; set; }
  /// Id Of Query
  public long? query_id { get; set; } = null;
  /// Refresh Interval
  public string? refresh_interval { get; set; } = null;
  /// Refresh Interval as integer (read-only)
  public long? refresh_interval_to_i { get; set; } = null;
  public ResultMakerWithIdVisConfigAndDynamicFields? result_maker { get; set; }
  /// ID of the ResultMakerLookup entry.
  public long? result_maker_id { get; set; } = null;
  /// Text tile subtitle text
  public string? subtitle_text { get; set; } = null;
  /// Title of dashboard element
  public string? title { get; set; } = null;
  /// Whether title is hidden
  public bool? title_hidden { get; set; } = null;
  /// Text tile title
  public string? title_text { get; set; } = null;
  /// Type
  public string? type { get; set; } = null;
  /// Count of Alerts associated to a dashboard element (read-only)
  public long? alert_count { get; set; } = null;
  /// Text tile title text as Html (read-only)
  public string? title_text_as_html { get; set; } = null;
  /// Text tile subtitle text as Html (read-only)
  public string? subtitle_text_as_html { get; set; } = null;
}

public class DashboardFilter : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of Dashboard (read-only)
  public string? dashboard_id { get; set; } = null;
  /// Name of filter
  public string? name { get; set; } = null;
  /// Title of filter
  public string? title { get; set; } = null;
  /// Type of filter: one of date, number, string, or field
  public string? type { get; set; } = null;
  /// Default value of filter
  public string? default_value { get; set; } = null;
  /// Model of filter (required if type = field)
  public string? model { get; set; } = null;
  /// Explore of filter (required if type = field)
  public string? explore { get; set; } = null;
  /// Dimension of filter (required if type = field)
  public string? dimension { get; set; } = null;
  /// Field information (read-only)
  public StringDictionary<object>? field { get; set; } = null;
  /// Display order of this filter relative to other filters
  public long? row { get; set; } = null;
  /// Array of listeners for faceted filters
  public string[]? listens_to_filters { get; set; } = null;
  /// Whether the filter allows multiple filter values
  public bool? allow_multiple_values { get; set; } = null;
  /// Whether the filter requires a value to run the dashboard
  public bool? required { get; set; } = null;
  /// The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  public StringDictionary<object>? ui_config { get; set; } = null;
}

public class DashboardLayout : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of Dashboard
  public string? dashboard_id { get; set; } = null;
  /// Type
  public string? type { get; set; } = null;
  /// Is Active
  public bool? active { get; set; } = null;
  /// Column Width
  public long? column_width { get; set; } = null;
  /// Width
  public long? width { get; set; } = null;
  /// Whether or not the dashboard layout is deleted. (read-only)
  public bool? deleted { get; set; } = null;
  /// Title extracted from the dashboard this layout represents. (read-only)
  public string? dashboard_title { get; set; } = null;
  /// Components (read-only)
  public DashboardLayoutComponent[]? dashboard_layout_components { get; set; } = null;
}

public class DashboardLayoutComponent : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of Dashboard Layout
  public string? dashboard_layout_id { get; set; } = null;
  /// Id Of Dashboard Element
  public string? dashboard_element_id { get; set; } = null;
  /// Row
  public long? row { get; set; } = null;
  /// Column
  public long? column { get; set; } = null;
  /// Width
  public long? width { get; set; } = null;
  /// Height
  public long? height { get; set; } = null;
  /// Whether or not the dashboard layout component is deleted (read-only)
  public bool? deleted { get; set; } = null;
  /// Dashboard element title, extracted from the Dashboard Element. (read-only)
  public string? element_title { get; set; } = null;
  /// Whether or not the dashboard element title is displayed. (read-only)
  public bool? element_title_hidden { get; set; } = null;
  /// Visualization type, extracted from a query's vis_config (read-only)
  public string? vis_type { get; set; } = null;
}

public class DashboardLookml : SdkModel 
{
  /// Id of Dashboard (read-only)
  public string? dashboard_id { get; set; } = null;
  /// lookml of UDD (read-only)
  public string? lookml { get; set; } = null;
}

public class DataActionForm : SdkModel 
{
  public DataActionUserState? state { get; set; }
  /// Array of form fields. (read-only)
  public DataActionFormField[]? fields { get; set; } = null;
}

public class DataActionFormField : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Human-readable label (read-only)
  public string? label { get; set; } = null;
  /// Description of field (read-only)
  public string? description { get; set; } = null;
  /// Type of field. (read-only)
  public string? type { get; set; } = null;
  /// Default value of the field. (read-only)
  public string? @default { get; set; } = null;
  /// The URL for an oauth link, if type is 'oauth_link'. (read-only)
  public string? oauth_url { get; set; } = null;
  /// Whether or not a field supports interactive forms. (read-only)
  public bool? interactive { get; set; } = null;
  /// Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation. (read-only)
  public bool? required { get; set; } = null;
  /// If the form type is 'select', a list of options to be selected from. (read-only)
  public DataActionFormSelectOption[]? options { get; set; } = null;
}

public class DataActionFormSelectOption : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Human-readable label (read-only)
  public string? label { get; set; } = null;
}

public class DataActionRequest : SdkModel 
{
  /// The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from.
  public StringDictionary<string>? action { get; set; } = null;
  /// User input for any form values the data action might use.
  public StringDictionary<string>? form_values { get; set; } = null;
}

public class DataActionResponse : SdkModel 
{
  /// ID of the webhook event that sent this data action. In some error conditions, this may be null. (read-only)
  public string? webhook_id { get; set; } = null;
  /// Whether the data action was successful. (read-only)
  public bool? success { get; set; } = null;
  /// When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action. (read-only)
  public bool? refresh_query { get; set; } = null;
  public ValidationError? validation_errors { get; set; }
  /// Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future. (read-only)
  public string? message { get; set; } = null;
}

public class DataActionUserState : SdkModel 
{
  /// User state data (read-only)
  public string? data { get; set; } = null;
  /// Time in seconds until the state needs to be refreshed (read-only)
  public long? refresh_time { get; set; } = null;
}

public class Datagroup : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// UNIX timestamp at which this entry was created. (read-only)
  public long? created_at { get; set; } = null;
  /// Unique ID of the datagroup (read-only)
  public long? id { get; set; } = null;
  /// Name of the model containing the datagroup. Unique when combined with name. (read-only)
  public string? model_name { get; set; } = null;
  /// Name of the datagroup. Unique when combined with model_name. (read-only)
  public string? name { get; set; } = null;
  /// UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
  public long? stale_before { get; set; } = null;
  /// UNIX timestamp at which this entry trigger was last checked. (read-only)
  public long? trigger_check_at { get; set; } = null;
  /// The message returned with the error of the last trigger check. (read-only)
  public string? trigger_error { get; set; } = null;
  /// The value of the trigger when last checked. (read-only)
  public string? trigger_value { get; set; } = null;
  /// UNIX timestamp at which this entry became triggered. Cannot be in the future.
  public long? triggered_at { get; set; } = null;
}

public class DBConnection : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of the connection. Also used as the unique identifier
  public string? name { get; set; } = null;
  public Dialect? dialect { get; set; }
  /// SQL Runner snippets for this connection (read-only)
  public Snippet[]? snippets { get; set; } = null;
  /// Host name/address of server
  public string? host { get; set; } = null;
  /// Port number on server
  public long? port { get; set; } = null;
  /// Username for server authentication
  public string? username { get; set; } = null;
  /// (Write-Only) Password for server authentication
  public string? password { get; set; } = null;
  /// Whether the connection uses OAuth for authentication. (read-only)
  public bool? uses_oauth { get; set; } = null;
  /// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  public string? certificate { get; set; } = null;
  /// (Write-Only) Certificate keyfile type - .json or .p12
  public string? file_type { get; set; } = null;
  /// Database name
  public string? database { get; set; } = null;
  /// Time zone of database
  public string? db_timezone { get; set; } = null;
  /// Timezone to use in queries
  public string? query_timezone { get; set; } = null;
  /// Scheme name
  public string? schema { get; set; } = null;
  /// Maximum number of concurrent connection to use
  public long? max_connections { get; set; } = null;
  /// Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
  public string? max_billing_gigabytes { get; set; } = null;
  /// Use SSL/TLS when connecting to server
  public bool? ssl { get; set; } = null;
  /// Verify the SSL
  public bool? verify_ssl { get; set; } = null;
  /// Name of temporary database (if used)
  public string? tmp_db_name { get; set; } = null;
  /// Additional params to add to JDBC connection string
  public string? jdbc_additional_params { get; set; } = null;
  /// Connection Pool Timeout, in seconds
  public long? pool_timeout { get; set; } = null;
  /// (Read/Write) SQL Dialect name
  public string? dialect_name { get; set; } = null;
  /// Creation date for this connection (read-only)
  public string? created_at { get; set; } = null;
  /// Id of user who last modified this connection configuration (read-only)
  public string? user_id { get; set; } = null;
  /// Is this an example connection? (read-only)
  public bool? example { get; set; } = null;
  /// (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
  public bool? user_db_credentials { get; set; } = null;
  /// Fields whose values map to user attribute names
  public string[]? user_attribute_fields { get; set; } = null;
  /// Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
  public string? maintenance_cron { get; set; } = null;
  /// Unix timestamp at start of last completed PDT trigger check process (read-only)
  public string? last_regen_at { get; set; } = null;
  /// Unix timestamp at start of last completed PDT reap process (read-only)
  public string? last_reap_at { get; set; } = null;
  /// Precache tables in the SQL Runner
  public bool? sql_runner_precache_tables { get; set; } = null;
  /// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  public string? after_connect_statements { get; set; } = null;
  public DBConnectionOverride? pdt_context_override { get; set; }
  /// Is this connection created and managed by Looker (read-only)
  public bool? managed { get; set; } = null;
  /// Maximum number of threads to use to build PDTs in parallel
  public long? pdt_concurrency { get; set; } = null;
  /// When disable_context_comment is true comment will not be added to SQL
  public bool? disable_context_comment { get; set; } = null;
}

public class DBConnectionBase : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of the connection. Also used as the unique identifier (read-only)
  public string? name { get; set; } = null;
  public Dialect? dialect { get; set; }
  /// SQL Runner snippets for this connection (read-only)
  public Snippet[]? snippets { get; set; } = null;
}

public class DBConnectionOverride : SdkModel 
{
  /// Context in which to override (`pdt` is the only allowed value)
  public string? context { get; set; } = null;
  /// Host name/address of server
  public string? host { get; set; } = null;
  /// Port number on server
  public string? port { get; set; } = null;
  /// Username for server authentication
  public string? username { get; set; } = null;
  /// (Write-Only) Password for server authentication
  public string? password { get; set; } = null;
  /// Whether or not the password is overridden in this context (read-only)
  public bool? has_password { get; set; } = null;
  /// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  public string? certificate { get; set; } = null;
  /// (Write-Only) Certificate keyfile type - .json or .p12
  public string? file_type { get; set; } = null;
  /// Database name
  public string? database { get; set; } = null;
  /// Scheme name
  public string? schema { get; set; } = null;
  /// Additional params to add to JDBC connection string
  public string? jdbc_additional_params { get; set; } = null;
  /// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  public string? after_connect_statements { get; set; } = null;
}

public class DBConnectionTestResult : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// JDBC connection string. (only populated in the 'connect' test) (read-only)
  public string? connection_string { get; set; } = null;
  /// Result message of test (read-only)
  public string? message { get; set; } = null;
  /// Name of test (read-only)
  public string? name { get; set; } = null;
  /// Result code of test (read-only)
  public string? status { get; set; } = null;
}

public class DelegateOauthTest : SdkModel 
{
  /// Delegate Oauth Connection Name (read-only)
  public string? name { get; set; } = null;
  /// The ID of the installation target. For Slack, this would be workspace id. (read-only)
  public string? installation_target_id { get; set; } = null;
  /// Installation ID (read-only)
  public long? installation_id { get; set; } = null;
  /// Whether or not the test was successful (read-only)
  public bool? success { get; set; } = null;
}

public class Dialect : SdkModel 
{
  /// The name of the dialect (read-only)
  public string? name { get; set; } = null;
  /// The human-readable label of the connection (read-only)
  public string? label { get; set; } = null;
  /// Whether the dialect supports query cost estimates (read-only)
  public bool? supports_cost_estimate { get; set; } = null;
  /// PDT index columns (read-only)
  public string? persistent_table_indexes { get; set; } = null;
  /// PDT sortkey columns (read-only)
  public string? persistent_table_sortkeys { get; set; } = null;
  /// PDT distkey column (read-only)
  public string? persistent_table_distkey { get; set; } = null;
  /// Suports streaming results (read-only)
  public bool? supports_streaming { get; set; } = null;
  /// Should SQL Runner snippets automatically be run (read-only)
  public bool? automatically_run_sql_runner_snippets { get; set; } = null;
  /// Array of names of the tests that can be run on a connection using this dialect (read-only)
  public string[]? connection_tests { get; set; } = null;
  /// Is supported with the inducer (i.e. generate from sql) (read-only)
  public bool? supports_inducer { get; set; } = null;
  /// Can multiple databases be accessed from a connection using this dialect (read-only)
  public bool? supports_multiple_databases { get; set; } = null;
  /// Whether the dialect supports allowing Looker to build persistent derived tables (read-only)
  public bool? supports_persistent_derived_tables { get; set; } = null;
  /// Does the database have client SSL support settable through the JDBC string explicitly? (read-only)
  public bool? has_ssl_support { get; set; } = null;
}

public class DialectInfo : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Default number max connections (read-only)
  public string? default_max_connections { get; set; } = null;
  /// Default port number (read-only)
  public string? default_port { get; set; } = null;
  /// Is the supporting driver installed (read-only)
  public bool? installed { get; set; } = null;
  /// The human-readable label of the connection (read-only)
  public string? label { get; set; } = null;
  /// What the dialect calls the equivalent of a normal SQL table (read-only)
  public string? label_for_database_equivalent { get; set; } = null;
  /// The name of the dialect (read-only)
  public string? name { get; set; } = null;
  public DialectInfoOptions? supported_options { get; set; }
}

public class DialectInfoOptions : SdkModel 
{
  /// Has additional params support (read-only)
  public bool? additional_params { get; set; } = null;
  /// Has auth support (read-only)
  public bool? auth { get; set; } = null;
  /// Has host support (read-only)
  public bool? host { get; set; } = null;
  /// Has support for a service account (read-only)
  public bool? oauth_credentials { get; set; } = null;
  /// Has project name support (read-only)
  public bool? project_name { get; set; } = null;
  /// Has schema support (read-only)
  public bool? schema { get; set; } = null;
  /// Has SSL support (read-only)
  public bool? ssl { get; set; } = null;
  /// Has timezone support (read-only)
  public bool? timezone { get; set; } = null;
  /// Has tmp table support (read-only)
  public bool? tmp_table { get; set; } = null;
  /// Username is required (read-only)
  public bool? username_required { get; set; } = null;
}

public class DigestEmails : SdkModel 
{
  /// Whether or not digest emails are enabled
  public bool? is_enabled { get; set; } = null;
}

public class DigestEmailSend : SdkModel 
{
  /// True if content was successfully generated and delivered
  public bool? configuration_delivered { get; set; } = null;
}

public class DiscretePalette : SdkModel 
{
  /// Unique identity string (read-only)
  public string? id { get; set; } = null;
  /// Label for palette
  public string? label { get; set; } = null;
  /// Type of palette
  public string? type { get; set; } = null;
  /// Array of colors in the palette
  public string[]? colors { get; set; } = null;
}

public class EmbedParams : SdkModel 
{
  /// The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
  public Url target_url { get; set; } = "";
  /// Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
  public long? session_length { get; set; } = null;
  /// When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
  public bool? force_logout_login { get; set; } = null;
}

public class EmbedSsoParams : SdkModel 
{
  /// The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.
  public Url target_url { get; set; } = "";
  /// Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).
  public long? session_length { get; set; } = null;
  /// When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.
  public bool? force_logout_login { get; set; } = null;
  /// A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.
  public string? external_user_id { get; set; } = null;
  /// First name of the embed user. Defaults to 'Embed' if not specified
  public string? first_name { get; set; } = null;
  /// Last name of the embed user. Defaults to 'User' if not specified
  public string? last_name { get; set; } = null;
  /// Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.
  public string? user_timezone { get; set; } = null;
  /// List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.
  public string[]? permissions { get; set; } = null;
  /// List of model names that the embed user may access
  public string[]? models { get; set; } = null;
  /// List of Looker group ids in which to enroll the embed user
  public long[]? group_ids { get; set; } = null;
  /// A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.
  public long? external_group_id { get; set; } = null;
  /// A dictionary of name-value pairs associating a Looker user attribute name with a value.
  public StringDictionary<object>? user_attributes { get; set; } = null;
  /// Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance.
  public long? secret_id { get; set; } = null;
}

public class EmbedUrlResponse : SdkModel 
{
  /// The embed URL. Any modification to this string will make the URL unusable. (read-only)
  public string? url { get; set; } = null;
}

public class Error : SdkModel 
{
  /// Error details (read-only)
  public string message { get; set; } = "";
  /// Documentation link (read-only)
  public Url documentation_url { get; set; } = "";
}

public class Folder : SdkModel 
{
  /// Unique Name
  public string name { get; set; } = "";
  /// Id of Parent. If the parent id is null, this is a root-level entry
  public string? parent_id { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Time the space was created (read-only)
  public DateTime? created_at { get; set; } = null;
  /// User Id of Creator (read-only)
  public long? creator_id { get; set; } = null;
  /// Children Count (read-only)
  public long? child_count { get; set; } = null;
  /// Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login (read-only)
  public string? external_id { get; set; } = null;
  /// Folder is an embed folder (read-only)
  public bool? is_embed { get; set; } = null;
  /// Folder is the root embed shared folder (read-only)
  public bool? is_embed_shared_root { get; set; } = null;
  /// Folder is the root embed users folder (read-only)
  public bool? is_embed_users_root { get; set; } = null;
  /// Folder is a user's personal folder (read-only)
  public bool? is_personal { get; set; } = null;
  /// Folder is descendant of a user's personal folder (read-only)
  public bool? is_personal_descendant { get; set; } = null;
  /// Folder is the root shared folder (read-only)
  public bool? is_shared_root { get; set; } = null;
  /// Folder is the root user folder (read-only)
  public bool? is_users_root { get; set; } = null;
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Dashboards (read-only)
  public DashboardBase[]? dashboards { get; set; } = null;
  /// Looks (read-only)
  public LookWithDashboards[]? looks { get; set; } = null;
}

public class FolderBase : SdkModel 
{
  /// Unique Name
  public string name { get; set; } = "";
  /// Id of Parent. If the parent id is null, this is a root-level entry
  public string? parent_id { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Time the folder was created (read-only)
  public DateTime? created_at { get; set; } = null;
  /// User Id of Creator (read-only)
  public long? creator_id { get; set; } = null;
  /// Children Count (read-only)
  public long? child_count { get; set; } = null;
  /// Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login (read-only)
  public string? external_id { get; set; } = null;
  /// Folder is an embed folder (read-only)
  public bool? is_embed { get; set; } = null;
  /// Folder is the root embed shared folder (read-only)
  public bool? is_embed_shared_root { get; set; } = null;
  /// Folder is the root embed users folder (read-only)
  public bool? is_embed_users_root { get; set; } = null;
  /// Folder is a user's personal folder (read-only)
  public bool? is_personal { get; set; } = null;
  /// Folder is descendant of a user's personal folder (read-only)
  public bool? is_personal_descendant { get; set; } = null;
  /// Folder is the root shared folder (read-only)
  public bool? is_shared_root { get; set; } = null;
  /// Folder is the root user folder (read-only)
  public bool? is_users_root { get; set; } = null;
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
}

public class GitBranch : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The short name on the local. Updating `name` results in `git checkout <new_name>`
  public string? name { get; set; } = null;
  /// The name of the remote (read-only)
  public string? remote { get; set; } = null;
  /// The short name on the remote (read-only)
  public string? remote_name { get; set; } = null;
  /// Name of error (read-only)
  public string? error { get; set; } = null;
  /// Message describing an error if present (read-only)
  public string? message { get; set; } = null;
  /// Name of the owner of a personal branch (read-only)
  public string? owner_name { get; set; } = null;
  /// Whether or not this branch is readonly (read-only)
  public bool? @readonly { get; set; } = null;
  /// Whether or not this branch is a personal branch - readonly for all developers except the owner (read-only)
  public bool? personal { get; set; } = null;
  /// Whether or not a local ref exists for the branch (read-only)
  public bool? is_local { get; set; } = null;
  /// Whether or not a remote ref exists for the branch (read-only)
  public bool? is_remote { get; set; } = null;
  /// Whether or not this is the production branch (read-only)
  public bool? is_production { get; set; } = null;
  /// Number of commits the local branch is ahead of the remote (read-only)
  public long? ahead_count { get; set; } = null;
  /// Number of commits the local branch is behind the remote (read-only)
  public long? behind_count { get; set; } = null;
  /// UNIX timestamp at which this branch was last committed. (read-only)
  public long? commit_at { get; set; } = null;
  /// The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
  public string? @ref { get; set; } = null;
  /// The resolved ref of this branch remote. (read-only)
  public string? remote_ref { get; set; } = null;
}

public class GitConnectionTest : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Human readable string describing the test (read-only)
  public string? description { get; set; } = null;
  /// A short string, uniquely naming this test (read-only)
  public string? id { get; set; } = null;
}

public class GitConnectionTestResult : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// A short string, uniquely naming this test (read-only)
  public string? id { get; set; } = null;
  /// Additional data from the test (read-only)
  public string? message { get; set; } = null;
  /// Either 'pass' or 'fail' (read-only)
  public string? status { get; set; } = null;
}

public class GitStatus : SdkModel 
{
  /// Git action: add, delete, etc (read-only)
  public string? action { get; set; } = null;
  /// When true, changes to the local file conflict with the remote repository (read-only)
  public bool? conflict { get; set; } = null;
  /// When true, the file can be reverted to an earlier state (read-only)
  public bool? revertable { get; set; } = null;
  /// Git description of the action (read-only)
  public string? text { get; set; } = null;
}

public class Group : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Group can be used in content access controls
  public bool? can_add_to_content_metadata { get; set; } = null;
  /// Currently logged in user is group member (read-only)
  public bool? contains_current_user { get; set; } = null;
  /// External Id group if embed group (read-only)
  public string? external_group_id { get; set; } = null;
  /// Group membership controlled outside of Looker (read-only)
  public bool? externally_managed { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// New users are added to this group by default (read-only)
  public bool? include_by_default { get; set; } = null;
  /// Name of group
  public string? name { get; set; } = null;
  /// Number of users included in this group (read-only)
  public long? user_count { get; set; } = null;
}

public class GroupIdForGroupInclusion : SdkModel 
{
  /// Id of group (read-only)
  public long? group_id { get; set; } = null;
}

public class GroupIdForGroupUserInclusion : SdkModel 
{
  /// Id of user (read-only)
  public long? user_id { get; set; } = null;
}

public class GroupSearch : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Group can be used in content access controls
  public bool? can_add_to_content_metadata { get; set; } = null;
  /// Currently logged in user is group member (read-only)
  public bool? contains_current_user { get; set; } = null;
  /// External Id group if embed group (read-only)
  public string? external_group_id { get; set; } = null;
  /// Group membership controlled outside of Looker (read-only)
  public bool? externally_managed { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// New users are added to this group by default (read-only)
  public bool? include_by_default { get; set; } = null;
  /// Name of group
  public string? name { get; set; } = null;
  /// Number of users included in this group (read-only)
  public long? user_count { get; set; } = null;
  /// Roles assigned to group (read-only)
  public Role[]? roles { get; set; } = null;
}

public class ImportedProject : SdkModel 
{
  /// Dependency name (read-only)
  public string? name { get; set; } = null;
  /// Url for a remote dependency (read-only)
  public string? url { get; set; } = null;
  /// Ref for a remote dependency (read-only)
  public string? @ref { get; set; } = null;
  /// Flag signifying if a dependency is remote or local (read-only)
  public bool? is_remote { get; set; } = null;
}

public class Integration : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// ID of the integration. (read-only)
  public string? id { get; set; } = null;
  /// ID of the integration hub. (read-only)
  public long? integration_hub_id { get; set; } = null;
  /// Label for the integration. (read-only)
  public string? label { get; set; } = null;
  /// Description of the integration. (read-only)
  public string? description { get; set; } = null;
  /// Whether the integration is available to users.
  public bool? enabled { get; set; } = null;
  /// Array of params for the integration.
  public IntegrationParam[]? @params { get; set; } = null;
  /// A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: "txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip". (read-only)
  public string[]? supported_formats { get; set; } = null;
  /// A list of action types the integration supports. Valid values are: "cell", "query", "dashboard". (read-only)
  public string[]? supported_action_types { get; set; } = null;
  /// A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "formatted", "unformatted". (read-only)
  public string[]? supported_formattings { get; set; } = null;
  /// A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: "apply", "noapply". (read-only)
  public string[]? supported_visualization_formattings { get; set; } = null;
  /// A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: "push", "url". (read-only)
  public string[]? supported_download_settings { get; set; } = null;
  /// URL to an icon for the integration. (read-only)
  public string? icon_url { get; set; } = null;
  /// Whether the integration uses oauth. (read-only)
  public bool? uses_oauth { get; set; } = null;
  /// A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required. (read-only)
  public IntegrationRequiredField[]? required_fields { get; set; } = null;
  /// Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker. (read-only)
  public bool? delegate_oauth { get; set; } = null;
  /// Whether the integration is available to users.
  public long[]? installed_delegate_oauth_targets { get; set; } = null;
}

public class IntegrationHub : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// ID of the hub. (read-only)
  public long? id { get; set; } = null;
  /// URL of the hub.
  public string? url { get; set; } = null;
  /// Label of the hub. (read-only)
  public string? label { get; set; } = null;
  /// Whether this hub is a first-party integration hub operated by Looker. (read-only)
  public bool? official { get; set; } = null;
  /// An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable. (read-only)
  public string? fetch_error_message { get; set; } = null;
  /// (Write-Only) An authorization key that will be sent to the integration hub on every request.
  public string? authorization_token { get; set; } = null;
  /// Whether the authorization_token is set for the hub. (read-only)
  public bool? has_authorization_token { get; set; } = null;
  /// Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true. (read-only)
  public bool? legal_agreement_signed { get; set; } = null;
  /// Whether the legal terms for the integration hub are required before use. (read-only)
  public bool? legal_agreement_required { get; set; } = null;
  /// The legal agreement text for this integration hub. (read-only)
  public string? legal_agreement_text { get; set; } = null;
}

public class IntegrationParam : SdkModel 
{
  /// Name of the parameter.
  public string? name { get; set; } = null;
  /// Label of the parameter. (read-only)
  public string? label { get; set; } = null;
  /// Short description of the parameter. (read-only)
  public string? description { get; set; } = null;
  /// Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false. (read-only)
  public bool? required { get; set; } = null;
  /// Whether the parameter has a value set. (read-only)
  public bool? has_value { get; set; } = null;
  /// The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.
  public string? value { get; set; } = null;
  /// When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.
  public string? user_attribute_name { get; set; } = null;
  /// Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true. (read-only)
  public bool? sensitive { get; set; } = null;
  /// When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow. (read-only)
  public bool? per_user { get; set; } = null;
  /// When present, the param represents the oauth url the user will be taken to. (read-only)
  public string? delegate_oauth_url { get; set; } = null;
}

public class IntegrationRequiredField : SdkModel 
{
  /// Matches a field that has this tag. (read-only)
  public string? tag { get; set; } = null;
  /// If present, supercedes 'tag' and matches a field that has any of the provided tags. (read-only)
  public string[]? any_tag { get; set; } = null;
  /// If present, supercedes 'tag' and matches a field that has all of the provided tags. (read-only)
  public string[]? all_tags { get; set; } = null;
}

public class IntegrationTestResult : SdkModel 
{
  /// Whether or not the test was successful (read-only)
  public bool? success { get; set; } = null;
  /// A message representing the results of the test. (read-only)
  public string? message { get; set; } = null;
  /// An array of connection test result for delegate oauth actions. (read-only)
  public DelegateOauthTest[]? delegate_oauth_result { get; set; } = null;
}

public class InternalHelpResources : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
  public bool? enabled { get; set; } = null;
}

public class InternalHelpResourcesContent : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Text to display in the help menu item which will display the internal help resources
  public string? organization_name { get; set; } = null;
  /// Content to be displayed in the internal help resources page/modal
  public string? markdown_content { get; set; } = null;
}

public class LDAPConfig : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// (Write-Only)  Password for the LDAP account used to access the LDAP server
  public string? auth_password { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// Distinguished name of LDAP account used to access the LDAP server
  public string? auth_username { get; set; } = null;
  /// LDAP server hostname
  public string? connection_host { get; set; } = null;
  /// LDAP host port
  public string? connection_port { get; set; } = null;
  /// Use Transport Layer Security
  public bool? connection_tls { get; set; } = null;
  /// Do not verify peer when using TLS
  public bool? connection_tls_no_verify { get; set; } = null;
  /// (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// (Read-only) Groups that will be applied to new users the first time they login via LDAP (read-only)
  public Group[]? default_new_user_groups { get; set; } = null;
  /// (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// (Read-only) Roles that will be applied to new users the first time they login via LDAP (read-only)
  public Role[]? default_new_user_roles { get; set; } = null;
  /// Enable/Disable LDAP authentication for the server
  public bool? enabled { get; set; } = null;
  /// Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
  public bool? force_no_page { get; set; } = null;
  /// (Read-only) Array of mappings between LDAP Groups and Looker Roles (read-only)
  public LDAPGroupRead[]? groups { get; set; } = null;
  /// Base dn for finding groups in LDAP searches
  public string? groups_base_dn { get; set; } = null;
  /// Identifier for a strategy for how Looker will search for groups in the LDAP server
  public string? groups_finder_type { get; set; } = null;
  /// LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
  public string? groups_member_attribute { get; set; } = null;
  /// Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
  public string? groups_objectclasses { get; set; } = null;
  /// LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
  public string? groups_user_attribute { get; set; } = null;
  /// (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
  public LDAPGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// (Read-only) Has the password been set for the LDAP account used to access the LDAP server (read-only)
  public bool? has_auth_password { get; set; } = null;
  /// Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
  public bool? merge_new_users_by_email { get; set; } = null;
  /// When this config was last modified (read-only)
  public string? modified_at { get; set; } = null;
  /// User id of user who last modified this config (read-only)
  public string? modified_by { get; set; } = null;
  /// Set user roles in Looker based on groups from LDAP
  public bool? set_roles_from_groups { get; set; } = null;
  /// (Write-Only)  Test LDAP user password. For ldap tests only.
  public string? test_ldap_password { get; set; } = null;
  /// (Write-Only)  Test LDAP user login id. For ldap tests only.
  public string? test_ldap_user { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// Name of user record attributes used to indicate unique record id
  public string? user_attribute_map_ldap_id { get; set; } = null;
  /// (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes (read-only)
  public LDAPUserAttributeRead[]? user_attributes { get; set; } = null;
  /// (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
  public LDAPUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// Distinguished name of LDAP node used as the base for user searches
  public string? user_bind_base_dn { get; set; } = null;
  /// (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
  public string? user_custom_filter { get; set; } = null;
  /// Name(s) of user record attributes used for matching user login id (comma separated list)
  public string? user_id_attribute_names { get; set; } = null;
  /// (Optional) Name of user record objectclass used for finding user during login id
  public string? user_objectclass { get; set; } = null;
  /// Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to LDAP auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPConfigTestIssue : SdkModel 
{
  /// Severity of the issue. Error or Warning (read-only)
  public string? severity { get; set; } = null;
  /// Message describing the issue (read-only)
  public string? message { get; set; } = null;
}

public class LDAPConfigTestResult : SdkModel 
{
  /// Additional details for error cases (read-only)
  public string? details { get; set; } = null;
  /// Array of issues/considerations about the result (read-only)
  public LDAPConfigTestIssue[]? issues { get; set; } = null;
  /// Short human readable test about the result (read-only)
  public string? message { get; set; } = null;
  /// Test status code: always 'success' or 'error' (read-only)
  public string? status { get; set; } = null;
  /// A more detailed trace of incremental results during auth tests (read-only)
  public string? trace { get; set; } = null;
  public LDAPUser? user { get; set; }
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPGroupRead : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker (read-only)
  public string? looker_group_name { get; set; } = null;
  /// Name of group in LDAP (read-only)
  public string? name { get; set; } = null;
  /// Looker Roles (read-only)
  public Role[]? roles { get; set; } = null;
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPGroupWrite : SdkModel 
{
  /// Unique Id
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker
  public string? looker_group_name { get; set; } = null;
  /// Name of group in LDAP
  public string? name { get; set; } = null;
  /// Looker Role Ids
  public long[]? role_ids { get; set; } = null;
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPUser : SdkModel 
{
  /// Array of user's email addresses and aliases for use in migration (read-only)
  public string[]? all_emails { get; set; } = null;
  /// Dictionary of user's attributes (name/value) (read-only)
  public StringDictionary<string>? attributes { get; set; } = null;
  /// Primary email address (read-only)
  public string? email { get; set; } = null;
  /// First name (read-only)
  public string? first_name { get; set; } = null;
  /// Array of user's groups (group names only) (read-only)
  public string[]? groups { get; set; } = null;
  /// Last Name (read-only)
  public string? last_name { get; set; } = null;
  /// LDAP's distinguished name for the user record (read-only)
  public string? ldap_dn { get; set; } = null;
  /// LDAP's Unique ID for the user (read-only)
  public string? ldap_id { get; set; } = null;
  /// Array of user's roles (role names only) (read-only)
  public string[]? roles { get; set; } = null;
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPUserAttributeRead : SdkModel 
{
  /// Name of User Attribute in LDAP (read-only)
  public string? name { get; set; } = null;
  /// Required to be in LDAP assertion for login to be allowed to succeed (read-only)
  public bool? required { get; set; } = null;
  /// Looker User Attributes (read-only)
  public UserAttribute[]? user_attributes { get; set; } = null;
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LDAPUserAttributeWrite : SdkModel 
{
  /// Name of User Attribute in LDAP
  public string? name { get; set; } = null;
  /// Required to be in LDAP assertion for login to be allowed to succeed
  public bool? required { get; set; } = null;
  /// Looker User Attribute Ids
  public long[]? user_attribute_ids { get; set; } = null;
  /// Link to ldap config (read-only)
  public Url? url { get; set; } = null;
}

public class LegacyFeature : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Description (read-only)
  public string? description { get; set; } = null;
  /// Whether this feature has been enabled by a user
  public bool? enabled_locally { get; set; } = null;
  /// Whether this feature is currently enabled (read-only)
  public bool? enabled { get; set; } = null;
  /// Looker version where this feature became a legacy feature (read-only)
  public string? disallowed_as_of_version { get; set; } = null;
  /// Looker version where this feature will be automatically disabled (read-only)
  public string? disable_on_upgrade_to_version { get; set; } = null;
  /// Future Looker version where this feature will be removed (read-only)
  public string? end_of_life_version { get; set; } = null;
  /// URL for documentation about this feature (read-only)
  public string? documentation_url { get; set; } = null;
  /// Approximate date that this feature will be automatically disabled. (read-only)
  public DateTime? approximate_disable_date { get; set; } = null;
  /// Approximate date that this feature will be removed. (read-only)
  public DateTime? approximate_end_of_life_date { get; set; } = null;
  /// Whether this legacy feature may have been automatically disabled when upgrading to the current version. (read-only)
  public bool? has_disabled_on_upgrade { get; set; } = null;
}

public class Locale : SdkModel 
{
  /// Code for Locale (read-only)
  public string? code { get; set; } = null;
  /// Name of Locale in its own language (read-only)
  public string? native_name { get; set; } = null;
  /// Name of Locale in English (read-only)
  public string? english_name { get; set; } = null;
}

public class LocalizationSettings : SdkModel 
{
  /// Default locale for localization (read-only)
  public string? default_locale { get; set; } = null;
  /// Localization level - strict or permissive (read-only)
  public string? localization_level { get; set; } = null;
}

public class Look : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Look Title
  public string? title { get; set; } = null;
  /// User Id
  public long? user_id { get; set; } = null;
  /// Content Favorite Id (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Time that the Look was created. (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Whether or not a look is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// Time that the Look was deleted. (read-only)
  public DateTime? deleted_at { get; set; } = null;
  /// Id of User that deleted the look. (read-only)
  public long? deleter_id { get; set; } = null;
  /// Description
  public string? description { get; set; } = null;
  /// Embed Url (read-only)
  public string? embed_url { get; set; } = null;
  /// Excel File Url (read-only)
  public string? excel_file_url { get; set; } = null;
  /// Number of times favorited (read-only)
  public long? favorite_count { get; set; } = null;
  /// Google Spreadsheet Formula (read-only)
  public string? google_spreadsheet_formula { get; set; } = null;
  /// Image Embed Url (read-only)
  public string? image_embed_url { get; set; } = null;
  /// auto-run query when Look viewed
  public bool? is_run_on_load { get; set; } = null;
  /// Time that the Look was last accessed by any user (read-only)
  public DateTime? last_accessed_at { get; set; } = null;
  /// Id of User that last updated the look. (read-only)
  public long? last_updater_id { get; set; } = null;
  /// Time last viewed in the Looker web UI (read-only)
  public DateTime? last_viewed_at { get; set; } = null;
  public LookModel? model { get; set; }
  /// Is Public
  public bool? @public { get; set; } = null;
  /// Public Slug (read-only)
  public string? public_slug { get; set; } = null;
  /// Public Url (read-only)
  public string? public_url { get; set; } = null;
  /// Query Id
  public long? query_id { get; set; } = null;
  /// Short Url (read-only)
  public string? short_url { get; set; } = null;
  public FolderBase? folder { get; set; }
  /// Folder Id
  public string? folder_id { get; set; } = null;
  /// Time that the Look was updated. (read-only)
  public DateTime? updated_at { get; set; } = null;
  /// Number of times viewed in the Looker web UI (read-only)
  public long? view_count { get; set; } = null;
}

public class LookBasic : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Look Title (read-only)
  public string? title { get; set; } = null;
  /// User Id
  public long? user_id { get; set; } = null;
}

public class LookmlModel : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Array of names of connections this model is allowed to use
  public string[]? allowed_db_connection_names { get; set; } = null;
  /// Array of explores (if has_content) (read-only)
  public LookmlModelNavExplore[]? explores { get; set; } = null;
  /// Does this model declaration have have lookml content? (read-only)
  public bool? has_content { get; set; } = null;
  /// UI-friendly name for this model (read-only)
  public string? label { get; set; } = null;
  /// Name of the model. Also used as the unique identifier
  public string? name { get; set; } = null;
  /// Name of project containing the model
  public string? project_name { get; set; } = null;
  /// Is this model allowed to use all current and future connections
  public bool? unlimited_db_connections { get; set; } = null;
}

public class LookmlModelExplore : SdkModel 
{
  /// Fully qualified explore name (model name plus explore name) (read-only)
  public string? id { get; set; } = null;
  /// Explore name (read-only)
  public string? name { get; set; } = null;
  /// Description (read-only)
  public string? description { get; set; } = null;
  /// Label (read-only)
  public string? label { get; set; } = null;
  /// Scopes (read-only)
  public string[]? scopes { get; set; } = null;
  /// Can Total (read-only)
  public bool? can_total { get; set; } = null;
  /// Can Develop LookML (read-only)
  public bool? can_develop { get; set; } = null;
  /// Can See LookML (read-only)
  public bool? can_see_lookml { get; set; } = null;
  /// A URL linking to the definition of this explore in the LookML IDE. (read-only)
  public string? lookml_link { get; set; } = null;
  /// Can Save (read-only)
  public bool? can_save { get; set; } = null;
  /// Can Explain (read-only)
  public bool? can_explain { get; set; } = null;
  /// Can pivot in the DB (read-only)
  public bool? can_pivot_in_db { get; set; } = null;
  /// Can use subtotals (read-only)
  public bool? can_subtotal { get; set; } = null;
  /// Has timezone support (read-only)
  public bool? has_timezone_support { get; set; } = null;
  /// Cost estimates supported (read-only)
  public bool? supports_cost_estimate { get; set; } = null;
  /// Connection name (read-only)
  public string? connection_name { get; set; } = null;
  /// How nulls are sorted, possible values are "low", "high", "first" and "last" (read-only)
  public string? null_sort_treatment { get; set; } = null;
  /// List of model source files (read-only)
  public string[]? files { get; set; } = null;
  /// Primary source_file file (read-only)
  public string? source_file { get; set; } = null;
  /// Name of project (read-only)
  public string? project_name { get; set; } = null;
  /// Name of model (read-only)
  public string? model_name { get; set; } = null;
  /// Name of view (read-only)
  public string? view_name { get; set; } = null;
  /// Is hidden (read-only)
  public bool? hidden { get; set; } = null;
  /// A sql_table_name expression that defines what sql table the view/explore maps onto. Example: "prod_orders2 AS orders" in a view named orders. (read-only)
  public string? sql_table_name { get; set; } = null;
  /// (DEPRECATED) Array of access filter field names (read-only)
  public string[]? access_filter_fields { get; set; } = null;
  /// Access filters (read-only)
  public LookmlModelExploreAccessFilter[]? access_filters { get; set; } = null;
  /// Aliases (read-only)
  public LookmlModelExploreAlias[]? aliases { get; set; } = null;
  /// Always filter (read-only)
  public LookmlModelExploreAlwaysFilter[]? always_filter { get; set; } = null;
  /// Conditionally filter (read-only)
  public LookmlModelExploreConditionallyFilter[]? conditionally_filter { get; set; } = null;
  /// Array of index fields (read-only)
  public string[]? index_fields { get; set; } = null;
  /// Sets (read-only)
  public LookmlModelExploreSet[]? sets { get; set; } = null;
  /// An array of arbitrary string tags provided in the model for this explore. (read-only)
  public string[]? tags { get; set; } = null;
  /// Errors (read-only)
  public LookmlModelExploreError[]? errors { get; set; } = null;
  public LookmlModelExploreFieldset? fields { get; set; }
  /// Views joined into this explore (read-only)
  public LookmlModelExploreJoins[]? joins { get; set; } = null;
  /// Label used to group explores in the navigation menus (read-only)
  public string? group_label { get; set; } = null;
  /// An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type. (read-only)
  public LookmlModelExploreSupportedMeasureType[]? supported_measure_types { get; set; } = null;
}

public class LookmlModelExploreAccessFilter : SdkModel 
{
  /// Field to be filtered (read-only)
  public string? field { get; set; } = null;
  /// User attribute name (read-only)
  public string? user_attribute { get; set; } = null;
}

public class LookmlModelExploreAlias : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Value (read-only)
  public string? value { get; set; } = null;
}

public class LookmlModelExploreAlwaysFilter : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Value (read-only)
  public string? value { get; set; } = null;
}

public class LookmlModelExploreConditionallyFilter : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Value (read-only)
  public string? value { get; set; } = null;
}

public class LookmlModelExploreError : SdkModel 
{
  /// Error Message (read-only)
  public string? message { get; set; } = null;
  /// Details (read-only)
  public object? details { get; set; } = null;
  /// Error source location (read-only)
  public string? error_pos { get; set; } = null;
  /// Is this a field error (read-only)
  public bool? field_error { get; set; } = null;
}

public class LookmlModelExploreField : SdkModel 
{
  /// The appropriate horizontal text alignment the values of this field shoud be displayed in. Valid values are: "left", "right". (read-only)
  public string? align { get; set; } = null;
  /// Whether it's possible to filter on this field. (read-only)
  public bool? can_filter { get; set; } = null;
  /// Field category Valid values are: "parameter", "filter", "measure", "dimension". (read-only)
  public string? category { get; set; } = null;
  /// The default value that this field uses when filtering. Null if there is no default value. (read-only)
  public string? default_filter_value { get; set; } = null;
  /// Description (read-only)
  public string? description { get; set; } = null;
  /// An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain. (read-only)
  public LookmlModelExploreFieldEnumeration[]? enumerations { get; set; } = null;
  /// An error message indicating a problem with the definition of this field. If there are no errors, this will be null. (read-only)
  public string? error { get; set; } = null;
  /// A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI. (read-only)
  public string? field_group_label { get; set; } = null;
  /// When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context. (read-only)
  public string? field_group_variant { get; set; } = null;
  /// The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: "enumeration", "range". (read-only)
  public string? fill_style { get; set; } = null;
  /// An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to. (read-only)
  public long? fiscal_month_offset { get; set; } = null;
  /// Whether this field has a set of allowed_values specified in LookML. (read-only)
  public bool? has_allowed_values { get; set; } = null;
  /// Whether this field should be hidden from the user interface. (read-only)
  public bool? hidden { get; set; } = null;
  /// Whether this field is a filter. (read-only)
  public bool? is_filter { get; set; } = null;
  /// Whether this field represents a fiscal time value. (read-only)
  public bool? is_fiscal { get; set; } = null;
  /// Whether this field is of a type that represents a numeric value. (read-only)
  public bool? is_numeric { get; set; } = null;
  /// Whether this field is of a type that represents a time value. (read-only)
  public bool? is_timeframe { get; set; } = null;
  /// Whether this field can be time filtered. (read-only)
  public bool? can_time_filter { get; set; } = null;
  public LookmlModelExploreFieldTimeInterval? time_interval { get; set; }
  /// Fully-qualified human-readable label of the field. (read-only)
  public string? label { get; set; } = null;
  /// The name of the parameter that will provide a parameterized label for this field, if available in the current context. (read-only)
  public string? label_from_parameter { get; set; } = null;
  /// The human-readable label of the field, without the view label. (read-only)
  public string? label_short { get; set; } = null;
  /// A URL linking to the definition of this field in the LookML IDE. (read-only)
  public string? lookml_link { get; set; } = null;
  public LookmlModelExploreFieldMapLayer? map_layer { get; set; }
  /// Whether this field is a measure. (read-only)
  public bool? measure { get; set; } = null;
  /// Fully-qualified name of the field. (read-only)
  public string? name { get; set; } = null;
  /// If yes, the field will not be localized with the user attribute number_format. Defaults to no (read-only)
  public bool? strict_value_format { get; set; } = null;
  /// Whether this field is a parameter. (read-only)
  public bool? parameter { get; set; } = null;
  /// Whether this field can be removed from a query. (read-only)
  public bool? permanent { get; set; } = null;
  /// Whether or not the field represents a primary key. (read-only)
  public bool? primary_key { get; set; } = null;
  /// The name of the project this field is defined in. (read-only)
  public string? project_name { get; set; } = null;
  /// When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort. (read-only)
  public bool? requires_refresh_on_sort { get; set; } = null;
  /// The LookML scope this field belongs to. The scope is typically the field's view. (read-only)
  public string? scope { get; set; } = null;
  /// Whether this field can be sorted. (read-only)
  public bool? sortable { get; set; } = null;
  /// The path portion of source_file_path. (read-only)
  public string? source_file { get; set; } = null;
  /// The fully-qualified path of the project file this field is defined in. (read-only)
  public string? source_file_path { get; set; } = null;
  /// SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model. (read-only)
  public string? sql { get; set; } = null;
  /// An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model. (read-only)
  public LookmlModelExploreFieldSqlCase[]? sql_case { get; set; } = null;
  /// The name of the dimension to base suggest queries from. (read-only)
  public string? suggest_dimension { get; set; } = null;
  /// The name of the explore to base suggest queries from. (read-only)
  public string? suggest_explore { get; set; } = null;
  /// Whether or not suggestions are possible for this field. (read-only)
  public bool? suggestable { get; set; } = null;
  /// If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values. (read-only)
  public string[]? suggestions { get; set; } = null;
  /// An array of arbitrary string tags provided in the model for this field. (read-only)
  public string[]? tags { get; set; } = null;
  /// The LookML type of the field. (read-only)
  public string? type { get; set; } = null;
  /// An array of user attribute types that are allowed to be used in filters on this field. Valid values are: "advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode". (read-only)
  public string[]? user_attribute_filter_types { get; set; } = null;
  /// If specified, the LookML value format string for formatting values of this field. (read-only)
  public string? value_format { get; set; } = null;
  /// The name of the view this field belongs to. (read-only)
  public string? view { get; set; } = null;
  /// The human-readable label of the view the field belongs to. (read-only)
  public string? view_label { get; set; } = null;
  /// Whether this field was specified in "dynamic_fields" and is not part of the model. (read-only)
  public bool? dynamic { get; set; } = null;
  /// The name of the starting day of the week. Valid values are: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday". (read-only)
  public string? week_start_day { get; set; } = null;
  /// The number of times this field has been used in queries (read-only)
  public long? times_used { get; set; } = null;
}

public class LookmlModelExploreFieldEnumeration : SdkModel 
{
  /// Label (read-only)
  public string? label { get; set; } = null;
  /// Value (read-only)
  public object? value { get; set; } = null;
}

public class LookmlModelExploreFieldMapLayer : SdkModel 
{
  /// URL to the map layer resource. (read-only)
  public string? url { get; set; } = null;
  /// Name of the map layer, as defined in LookML. (read-only)
  public string? name { get; set; } = null;
  /// Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object.. (read-only)
  public string? feature_key { get; set; } = null;
  /// Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used. (read-only)
  public string? property_key { get; set; } = null;
  /// Which property from the TopoJSON data to use to label the region. When null, property_key should be used. (read-only)
  public string? property_label_key { get; set; } = null;
  /// The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections. (read-only)
  public string? projection { get; set; } = null;
  /// Specifies the data format of the region information. Valid values are: "topojson", "vector_tile_region". (read-only)
  public string? format { get; set; } = null;
  /// Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key. (read-only)
  public string? extents_json_url { get; set; } = null;
  /// The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming. (read-only)
  public long? max_zoom_level { get; set; } = null;
  /// The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming. (read-only)
  public long? min_zoom_level { get; set; } = null;
}

public class LookmlModelExploreFieldset : SdkModel 
{
  /// Array of dimensions (read-only)
  public LookmlModelExploreField[]? dimensions { get; set; } = null;
  /// Array of measures (read-only)
  public LookmlModelExploreField[]? measures { get; set; } = null;
  /// Array of filters (read-only)
  public LookmlModelExploreField[]? filters { get; set; } = null;
  /// Array of parameters (read-only)
  public LookmlModelExploreField[]? parameters { get; set; } = null;
}

public class LookmlModelExploreFieldSqlCase : SdkModel 
{
  /// SQL Case label value (read-only)
  public string? value { get; set; } = null;
  /// SQL Case condition expression (read-only)
  public string? condition { get; set; } = null;
}

public class LookmlModelExploreFieldTimeInterval : SdkModel 
{
  /// The type of time interval this field represents a grouping of. Valid values are: "day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "year". (read-only)
  public string? name { get; set; } = null;
  /// The number of intervals this field represents a grouping of. (read-only)
  public long? count { get; set; } = null;
}

public class LookmlModelExploreJoins : SdkModel 
{
  /// Name of this join (and name of the view to join) (read-only)
  public string? name { get; set; } = null;
  /// Fields referenced by the join (read-only)
  public string[]? dependent_fields { get; set; } = null;
  /// Fields of the joined view to pull into this explore (read-only)
  public string[]? fields { get; set; } = null;
  /// Name of the dimension in this explore whose value is in the primary key of the joined view (read-only)
  public string? foreign_key { get; set; } = null;
  /// Name of view to join (read-only)
  public string? from { get; set; } = null;
  /// Specifies whether all queries must use an outer join (read-only)
  public bool? outer_only { get; set; } = null;
  /// many_to_one, one_to_one, one_to_many, many_to_many (read-only)
  public string? relationship { get; set; } = null;
  /// Names of joins that must always be included in SQL queries (read-only)
  public string[]? required_joins { get; set; } = null;
  /// SQL expression that produces a foreign key (read-only)
  public string? sql_foreign_key { get; set; } = null;
  /// SQL ON expression describing the join condition (read-only)
  public string? sql_on { get; set; } = null;
  /// SQL table name to join (read-only)
  public string? sql_table_name { get; set; } = null;
  /// The join type: left_outer, full_outer, inner, or cross (read-only)
  public string? type { get; set; } = null;
  /// Label to display in UI selectors (read-only)
  public string? view_label { get; set; } = null;
}

public class LookmlModelExploreSet : SdkModel 
{
  /// Name (read-only)
  public string? name { get; set; } = null;
  /// Value set (read-only)
  public string[]? value { get; set; } = null;
}

public class LookmlModelExploreSupportedMeasureType : SdkModel 
{
  /// (read-only)
  public string? dimension_type { get; set; } = null;
  /// (read-only)
  public string[]? measure_types { get; set; } = null;
}

public class LookmlModelNavExplore : SdkModel 
{
  /// Name of the explore (read-only)
  public string? name { get; set; } = null;
  /// Description for the explore (read-only)
  public string? description { get; set; } = null;
  /// Label for the explore (read-only)
  public string? label { get; set; } = null;
  /// Is this explore marked as hidden (read-only)
  public bool? hidden { get; set; } = null;
  /// Label used to group explores in the navigation menus (read-only)
  public string? group_label { get; set; } = null;
}

public class LookmlTest : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of model containing this test. (read-only)
  public string? model_name { get; set; } = null;
  /// Name of this test. (read-only)
  public string? name { get; set; } = null;
  /// Name of the explore this test runs a query against (read-only)
  public string? explore_name { get; set; } = null;
  /// The url parameters that can be used to reproduce this test's query on an explore. (read-only)
  public string? query_url_params { get; set; } = null;
  /// Name of the LookML file containing this test. (read-only)
  public string? file { get; set; } = null;
  /// Line number of this test in LookML. (read-only)
  public long? line { get; set; } = null;
}

public class LookmlTestResult : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of model containing this test. (read-only)
  public string? model_name { get; set; } = null;
  /// Name of this test. (read-only)
  public string? test_name { get; set; } = null;
  /// Number of assertions in this test (read-only)
  public long? assertions_count { get; set; } = null;
  /// Number of assertions passed in this test (read-only)
  public long? assertions_failed { get; set; } = null;
  /// A list of any errors encountered by the test. (read-only)
  public ProjectError[]? errors { get; set; } = null;
  /// A list of any warnings encountered by the test. (read-only)
  public ProjectError[]? warnings { get; set; } = null;
  /// True if this test passsed without errors. (read-only)
  public bool? success { get; set; } = null;
}

public class LookModel : SdkModel 
{
  /// Model Id (read-only)
  public string? id { get; set; } = null;
  /// Model Label (read-only)
  public string? label { get; set; } = null;
}

public class LookWithDashboards : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Look Title
  public string? title { get; set; } = null;
  /// User Id
  public long? user_id { get; set; } = null;
  /// Content Favorite Id (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Time that the Look was created. (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Whether or not a look is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// Time that the Look was deleted. (read-only)
  public DateTime? deleted_at { get; set; } = null;
  /// Id of User that deleted the look. (read-only)
  public long? deleter_id { get; set; } = null;
  /// Description
  public string? description { get; set; } = null;
  /// Embed Url (read-only)
  public string? embed_url { get; set; } = null;
  /// Excel File Url (read-only)
  public string? excel_file_url { get; set; } = null;
  /// Number of times favorited (read-only)
  public long? favorite_count { get; set; } = null;
  /// Google Spreadsheet Formula (read-only)
  public string? google_spreadsheet_formula { get; set; } = null;
  /// Image Embed Url (read-only)
  public string? image_embed_url { get; set; } = null;
  /// auto-run query when Look viewed
  public bool? is_run_on_load { get; set; } = null;
  /// Time that the Look was last accessed by any user (read-only)
  public DateTime? last_accessed_at { get; set; } = null;
  /// Id of User that last updated the look. (read-only)
  public long? last_updater_id { get; set; } = null;
  /// Time last viewed in the Looker web UI (read-only)
  public DateTime? last_viewed_at { get; set; } = null;
  public LookModel? model { get; set; }
  /// Is Public
  public bool? @public { get; set; } = null;
  /// Public Slug (read-only)
  public string? public_slug { get; set; } = null;
  /// Public Url (read-only)
  public string? public_url { get; set; } = null;
  /// Query Id
  public long? query_id { get; set; } = null;
  /// Short Url (read-only)
  public string? short_url { get; set; } = null;
  public FolderBase? folder { get; set; }
  /// Folder Id
  public string? folder_id { get; set; } = null;
  /// Time that the Look was updated. (read-only)
  public DateTime? updated_at { get; set; } = null;
  /// Number of times viewed in the Looker web UI (read-only)
  public long? view_count { get; set; } = null;
  /// Dashboards (read-only)
  public DashboardBase[]? dashboards { get; set; } = null;
}

public class LookWithQuery : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Id of content metadata (read-only)
  public long? content_metadata_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Look Title
  public string? title { get; set; } = null;
  /// User Id
  public long? user_id { get; set; } = null;
  /// Content Favorite Id (read-only)
  public long? content_favorite_id { get; set; } = null;
  /// Time that the Look was created. (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Whether or not a look is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// Time that the Look was deleted. (read-only)
  public DateTime? deleted_at { get; set; } = null;
  /// Id of User that deleted the look. (read-only)
  public long? deleter_id { get; set; } = null;
  /// Description
  public string? description { get; set; } = null;
  /// Embed Url (read-only)
  public string? embed_url { get; set; } = null;
  /// Excel File Url (read-only)
  public string? excel_file_url { get; set; } = null;
  /// Number of times favorited (read-only)
  public long? favorite_count { get; set; } = null;
  /// Google Spreadsheet Formula (read-only)
  public string? google_spreadsheet_formula { get; set; } = null;
  /// Image Embed Url (read-only)
  public string? image_embed_url { get; set; } = null;
  /// auto-run query when Look viewed
  public bool? is_run_on_load { get; set; } = null;
  /// Time that the Look was last accessed by any user (read-only)
  public DateTime? last_accessed_at { get; set; } = null;
  /// Id of User that last updated the look. (read-only)
  public long? last_updater_id { get; set; } = null;
  /// Time last viewed in the Looker web UI (read-only)
  public DateTime? last_viewed_at { get; set; } = null;
  public LookModel? model { get; set; }
  /// Is Public
  public bool? @public { get; set; } = null;
  /// Public Slug (read-only)
  public string? public_slug { get; set; } = null;
  /// Public Url (read-only)
  public string? public_url { get; set; } = null;
  /// Query Id
  public long? query_id { get; set; } = null;
  /// Short Url (read-only)
  public string? short_url { get; set; } = null;
  public FolderBase? folder { get; set; }
  /// Folder Id
  public string? folder_id { get; set; } = null;
  /// Time that the Look was updated. (read-only)
  public DateTime? updated_at { get; set; } = null;
  /// Number of times viewed in the Looker web UI (read-only)
  public long? view_count { get; set; } = null;
  public Query? query { get; set; }
  /// Url (read-only)
  public string? url { get; set; } = null;
}

public class Manifest : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Manifest project name (read-only)
  public string? name { get; set; } = null;
  /// Imports for a project (read-only)
  public ImportedProject[]? imports { get; set; } = null;
  public LocalizationSettings? localization_settings { get; set; }
}

public class MergeFields : SdkModel 
{
  /// Field name to map onto in the merged results
  public string? field_name { get; set; } = null;
  /// Field name from the source query
  public string? source_field_name { get; set; } = null;
}

public class MergeQuery : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Column Limit
  public string? column_limit { get; set; } = null;
  /// Dynamic Fields
  public string? dynamic_fields { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Pivots
  public string[]? pivots { get; set; } = null;
  /// Unique to get results (read-only)
  public long? result_maker_id { get; set; } = null;
  /// Sorts
  public string[]? sorts { get; set; } = null;
  /// Source Queries defining the results to be merged.
  public MergeQuerySourceQuery[]? source_queries { get; set; } = null;
  /// Total
  public bool? total { get; set; } = null;
  /// Visualization Config
  public StringDictionary<string>? vis_config { get; set; } = null;
}

public class MergeQuerySourceQuery : SdkModel 
{
  /// An array defining which fields of the source query are mapped onto fields of the merge query
  public MergeFields[]? merge_fields { get; set; } = null;
  /// Display name
  public string? name { get; set; } = null;
  /// Id of the query to merge
  public long? query_id { get; set; } = null;
}

public class ModelSet : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// (read-only)
  public bool? all_access { get; set; } = null;
  /// (read-only)
  public bool? built_in { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  public string[]? models { get; set; } = null;
  /// Name of ModelSet
  public string? name { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class ModelsNotValidated : SdkModel 
{
  /// Model name (read-only)
  public string? name { get; set; } = null;
  /// Project file (read-only)
  public string? project_file_id { get; set; } = null;
}

public class OauthClientApp : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The globally unique id of this application (read-only)
  public string? client_guid { get; set; } = null;
  /// The uri with which this application will receive an auth code by browser redirect.
  public string? redirect_uri { get; set; } = null;
  /// The application's display name
  public string? display_name { get; set; } = null;
  /// A description of the application that will be displayed to users
  public string? description { get; set; } = null;
  /// When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused.
  public bool? enabled { get; set; } = null;
  /// If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
  public long? group_id { get; set; } = null;
  /// All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid. (read-only)
  public DateTime? tokens_invalid_before { get; set; } = null;
  /// All users who have been activated to use this app (read-only)
  public UserPublic[]? activated_users { get; set; } = null;
}

public class OIDCConfig : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// OpenID Provider Audience
  public string? audience { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// OpenID Provider Authorization Url
  public Url? authorization_endpoint { get; set; } = null;
  /// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// (Read-only) Groups that will be applied to new users the first time they login via OIDC (read-only)
  public Group[]? default_new_user_groups { get; set; } = null;
  /// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// (Read-only) Roles that will be applied to new users the first time they login via OIDC (read-only)
  public Role[]? default_new_user_roles { get; set; } = null;
  /// Enable/Disable OIDC authentication for the server
  public bool? enabled { get; set; } = null;
  /// (Read-only) Array of mappings between OIDC Groups and Looker Roles (read-only)
  public OIDCGroupRead[]? groups { get; set; } = null;
  /// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  public string? groups_attribute { get; set; } = null;
  /// (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
  public OIDCGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// Relying Party Identifier (provided by OpenID Provider)
  public string? identifier { get; set; } = null;
  /// OpenID Provider Issuer
  public string? issuer { get; set; } = null;
  /// When this config was last modified (read-only)
  public DateTime? modified_at { get; set; } = null;
  /// User id of user who last modified this config (read-only)
  public long? modified_by { get; set; } = null;
  /// Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  public string? new_user_migration_types { get; set; } = null;
  /// Array of scopes to request.
  public string[]? scopes { get; set; } = null;
  /// (Write-Only) Relying Party Secret (provided by OpenID Provider)
  public string? secret { get; set; } = null;
  /// Set user roles in Looker based on groups from OIDC
  public bool? set_roles_from_groups { get; set; } = null;
  /// Slug to identify configurations that are created in order to run a OIDC config test (read-only)
  public string? test_slug { get; set; } = null;
  /// OpenID Provider Token Url
  public string? token_endpoint { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// (Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes (read-only)
  public OIDCUserAttributeRead[]? user_attributes { get; set; } = null;
  /// (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
  public OIDCUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// OpenID Provider User Information Url
  public Url? userinfo_endpoint { get; set; } = null;
  /// Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// OIDC auth'd users will inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to OIDC auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class OIDCGroupRead : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker (read-only)
  public string? looker_group_name { get; set; } = null;
  /// Name of group in OIDC (read-only)
  public string? name { get; set; } = null;
  /// Looker Roles (read-only)
  public Role[]? roles { get; set; } = null;
}

public class OIDCGroupWrite : SdkModel 
{
  /// Unique Id
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker
  public string? looker_group_name { get; set; } = null;
  /// Name of group in OIDC
  public string? name { get; set; } = null;
  /// Looker Role Ids
  public long[]? role_ids { get; set; } = null;
}

public class OIDCUserAttributeRead : SdkModel 
{
  /// Name of User Attribute in OIDC (read-only)
  public string? name { get; set; } = null;
  /// Required to be in OIDC assertion for login to be allowed to succeed (read-only)
  public bool? required { get; set; } = null;
  /// Looker User Attributes (read-only)
  public UserAttribute[]? user_attributes { get; set; } = null;
}

public class OIDCUserAttributeWrite : SdkModel 
{
  /// Name of User Attribute in OIDC
  public string? name { get; set; } = null;
  /// Required to be in OIDC assertion for login to be allowed to succeed
  public bool? required { get; set; } = null;
  /// Looker User Attribute Ids
  public long[]? user_attribute_ids { get; set; } = null;
}

public class PasswordConfig : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Minimum number of characters required for a new password.  Must be between 7 and 100
  public long? min_length { get; set; } = null;
  /// Require at least one numeric character
  public bool? require_numeric { get; set; } = null;
  /// Require at least one uppercase and one lowercase letter
  public bool? require_upperlower { get; set; } = null;
  /// Require at least one special character
  public bool? require_special { get; set; } = null;
}

public class Permission : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Permission symbol (read-only)
  public string? permission { get; set; } = null;
  /// Dependency parent symbol (read-only)
  public string? parent { get; set; } = null;
  /// Description (read-only)
  public string? description { get; set; } = null;
}

public class PermissionSet : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// (read-only)
  public bool? all_access { get; set; } = null;
  /// (read-only)
  public bool? built_in { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Name of PermissionSet
  public string? name { get; set; } = null;
  public string[]? permissions { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class Project : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Project Id (read-only)
  public string? id { get; set; } = null;
  /// Project display name
  public string? name { get; set; } = null;
  /// If true the project is configured with a git repository (read-only)
  public bool? uses_git { get; set; } = null;
  /// Git remote repository url
  public string? git_remote_url { get; set; } = null;
  /// Git username for HTTPS authentication. (For production only, if using user attributes.)
  public string? git_username { get; set; } = null;
  /// (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
  public string? git_password { get; set; } = null;
  /// User attribute name for username in per-user HTTPS authentication.
  public string? git_username_user_attribute { get; set; } = null;
  /// User attribute name for password in per-user HTTPS authentication.
  public string? git_password_user_attribute { get; set; } = null;
  /// Name of the git service provider
  public string? git_service_name { get; set; } = null;
  /// Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
  public long? git_application_server_http_port { get; set; } = null;
  /// Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: "http", "https".
  public string? git_application_server_http_scheme { get; set; } = null;
  /// (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
  public string? deploy_secret { get; set; } = null;
  /// (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
  public bool? unset_deploy_secret { get; set; } = null;
  /// The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
  public string? pull_request_mode { get; set; } = null;
  /// Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
  public bool? validation_required { get; set; } = null;
  /// If true, folders are enabled for this project
  public bool? folders_enabled { get; set; } = null;
  /// If true, advanced git release management is enabled for this project
  public bool? git_release_mgmt_enabled { get; set; } = null;
  /// Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
  public bool? allow_warnings { get; set; } = null;
  /// If true the project is an example project and cannot be modified (read-only)
  public bool? is_example { get; set; } = null;
  /// Status of dependencies in your manifest & lockfile
  public string? dependency_status { get; set; } = null;
}

public class ProjectError : SdkModel 
{
  /// A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a "File not found" error will have the same error code regardless of the filename in question or the user's display language (read-only)
  public string? code { get; set; } = null;
  /// Severity: fatal, error, warning, info, success (read-only)
  public string? severity { get; set; } = null;
  /// Error classification: syntax, deprecation, model_configuration, etc (read-only)
  public string? kind { get; set; } = null;
  /// Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker (read-only)
  public string? message { get; set; } = null;
  /// The field associated with this error (read-only)
  public string? field_name { get; set; } = null;
  /// Name of the file containing this error (read-only)
  public string? file_path { get; set; } = null;
  /// Line number in the file of this error (read-only)
  public long? line_number { get; set; } = null;
  /// The model associated with this error (read-only)
  public string? model_id { get; set; } = null;
  /// The explore associated with this error (read-only)
  public string? explore { get; set; } = null;
  /// A link to Looker documentation about this error (read-only)
  public string? help_url { get; set; } = null;
  /// Error parameters (read-only)
  public StringDictionary<string>? @params { get; set; } = null;
  /// A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display "(?)" where sensitive information would appear in the corresponding non-sanitized message (read-only)
  public string? sanitized_message { get; set; } = null;
}

public class ProjectFile : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases (read-only)
  public string? id { get; set; } = null;
  /// Path, file name, and extension of the file relative to the project root directory (read-only)
  public string? path { get; set; } = null;
  /// Display name (read-only)
  public string? title { get; set; } = null;
  /// File type: model, view, etc (read-only)
  public string? type { get; set; } = null;
  /// The extension of the file: .view.lkml, .model.lkml, etc (read-only)
  public string? extension { get; set; } = null;
  /// File mime type (read-only)
  public string? mime_type { get; set; } = null;
  /// State of editability for the file. (read-only)
  public bool? editable { get; set; } = null;
  public GitStatus? git_status { get; set; }
}

public class ProjectValidation : SdkModel 
{
  /// A list of project errors (read-only)
  public ProjectError[]? errors { get; set; } = null;
  /// A hash value computed from the project's current state (read-only)
  public string? project_digest { get; set; } = null;
  /// A list of models which were not fully validated (read-only)
  public ModelsNotValidated[]? models_not_validated { get; set; } = null;
  /// Duration of project validation in seconds (read-only)
  public float? computation_time { get; set; } = null;
}

public class ProjectValidationCache : SdkModel 
{
  /// A list of project errors (read-only)
  public ProjectError[]? errors { get; set; } = null;
  /// A hash value computed from the project's current state (read-only)
  public string? project_digest { get; set; } = null;
  /// A list of models which were not fully validated (read-only)
  public ModelsNotValidated[]? models_not_validated { get; set; } = null;
  /// Duration of project validation in seconds (read-only)
  public float? computation_time { get; set; } = null;
  /// If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated (read-only)
  public bool? stale { get; set; } = null;
}

public class ProjectWorkspace : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The id of the project (read-only)
  public string? project_id { get; set; } = null;
  /// The id of the local workspace containing the project files (read-only)
  public string? workspace_id { get; set; } = null;
  /// The status of the local git directory (read-only)
  public string? git_status { get; set; } = null;
  /// Git head revision name (read-only)
  public string? git_head { get; set; } = null;
  /// Status of the dependencies in your project. Valid values are: "lock_optional", "lock_required", "lock_error", "install_none". (read-only)
  public string? dependency_status { get; set; } = null;
  public GitBranch? git_branch { get; set; }
  /// The lookml syntax used by all files in this project (read-only)
  public string? lookml_type { get; set; } = null;
}

public class Query : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Model
  public string model { get; set; } = "";
  /// Explore Name
  public string view { get; set; } = "";
  /// Fields
  public string[]? fields { get; set; } = null;
  /// Pivots
  public string[]? pivots { get; set; } = null;
  /// Fill Fields
  public string[]? fill_fields { get; set; } = null;
  /// Filters
  public StringDictionary<string>? filters { get; set; } = null;
  /// Filter Expression
  public string? filter_expression { get; set; } = null;
  /// Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
  public string[]? sorts { get; set; } = null;
  /// Limit
  public string? limit { get; set; } = null;
  /// Column Limit
  public string? column_limit { get; set; } = null;
  /// Total
  public bool? total { get; set; } = null;
  /// Raw Total
  public string? row_total { get; set; } = null;
  /// Fields on which to run subtotals
  public string[]? subtotals { get; set; } = null;
  /// Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  public StringDictionary<object>? vis_config { get; set; } = null;
  /// The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
  public StringDictionary<object>? filter_config { get; set; } = null;
  /// Visible UI Sections
  public string? visible_ui_sections { get; set; } = null;
  /// Slug (read-only)
  public string? slug { get; set; } = null;
  /// Dynamic Fields
  public string? dynamic_fields { get; set; } = null;
  /// Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
  public string? client_id { get; set; } = null;
  /// Share Url (read-only)
  public string? share_url { get; set; } = null;
  /// Expanded Share Url (read-only)
  public string? expanded_share_url { get; set; } = null;
  /// Expanded Url (read-only)
  public string? url { get; set; } = null;
  /// Query Timezone
  public string? query_timezone { get; set; } = null;
  /// Has Table Calculations (read-only)
  public bool? has_table_calculations { get; set; } = null;
}

public class QueryTask : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Id of query
  public long? query_id { get; set; } = null;
  public Query? query { get; set; }
  /// whether or not to generate links in the query response.
  public bool? generate_links { get; set; } = null;
  /// Use production models to run query (even is user is in dev mode).
  public bool? force_production { get; set; } = null;
  /// Prefix to use for drill links.
  public string? path_prefix { get; set; } = null;
  /// Whether or not to use the cache
  public bool? cache { get; set; } = null;
  /// Whether or not to run table calculations on the server
  public bool? server_table_calcs { get; set; } = null;
  /// Retrieve any results from cache even if the results have expired.
  public bool? cache_only { get; set; } = null;
  /// cache key used to cache query. (read-only)
  public string? cache_key { get; set; } = null;
  /// Status of query task.
  public string? status { get; set; } = null;
  /// Source of query task.
  public string? source { get; set; } = null;
  /// Runtime of prior queries. (read-only)
  public float? runtime { get; set; } = null;
  /// Rebuild PDTS used in query.
  public bool? rebuild_pdts { get; set; } = null;
  /// Source of the results of the query. (read-only)
  public string? result_source { get; set; } = null;
  /// Id of look associated with query.
  public long? look_id { get; set; } = null;
  /// Id of dashboard associated with query.
  public string? dashboard_id { get; set; } = null;
  /// The data format of the query results. (read-only)
  public string? result_format { get; set; } = null;
}

public class RenderTask : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Date/Time render task was created (read-only)
  public string? created_at { get; set; } = null;
  /// Filter values to apply to the dashboard queries, in URL query format (read-only)
  public string? dashboard_filters { get; set; } = null;
  /// Id of dashboard to render (read-only)
  public long? dashboard_id { get; set; } = null;
  /// Dashboard layout style: single_column or tiled (read-only)
  public string? dashboard_style { get; set; } = null;
  /// Date/Time render task was completed (read-only)
  public string? finalized_at { get; set; } = null;
  /// Output height in pixels. Flowed layouts may ignore this value. (read-only)
  public long? height { get; set; } = null;
  /// Id of this render task (read-only)
  public string? id { get; set; } = null;
  /// Id of look to render (read-only)
  public long? look_id { get; set; } = null;
  /// Id of lookml dashboard to render (read-only)
  public string? lookml_dashboard_id { get; set; } = null;
  /// Id of query to render (read-only)
  public long? query_id { get; set; } = null;
  /// Number of seconds elapsed running queries (read-only)
  public double? query_runtime { get; set; } = null;
  /// Number of seconds elapsed rendering data (read-only)
  public double? render_runtime { get; set; } = null;
  /// Output format: pdf, png, or jpg (read-only)
  public string? result_format { get; set; } = null;
  /// Total seconds elapsed for render task (read-only)
  public double? runtime { get; set; } = null;
  /// Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure (read-only)
  public string? status { get; set; } = null;
  /// Additional information about the current status (read-only)
  public string? status_detail { get; set; } = null;
  /// The user account permissions in which the render task will execute (read-only)
  public long? user_id { get; set; } = null;
  /// Output width in pixels (read-only)
  public long? width { get; set; } = null;
}

public class RepositoryCredential : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public string? id { get; set; } = null;
  /// Root project Id (read-only)
  public string? root_project_id { get; set; } = null;
  /// Git remote repository url (read-only)
  public string? remote_url { get; set; } = null;
  /// Git username for HTTPS authentication.
  public string? git_username { get; set; } = null;
  /// (Write-Only) Git password for HTTPS authentication.
  public string? git_password { get; set; } = null;
  /// Public deploy key for SSH authentication.
  public string? ssh_public_key { get; set; } = null;
  /// Whether the credentials have been configured for the Git Repository. (read-only)
  public bool? is_configured { get; set; } = null;
}

public class ResultMakerFilterables : SdkModel 
{
  /// The model this filterable comes from (used for field suggestions). (read-only)
  public string? model { get; set; } = null;
  /// The view this filterable comes from (used for field suggestions). (read-only)
  public string? view { get; set; } = null;
  /// The name of the filterable thing (Query or Merged Results). (read-only)
  public string? name { get; set; } = null;
  /// array of dashboard_filter_name: and field: objects. (read-only)
  public ResultMakerFilterablesListen[]? listen { get; set; } = null;
}

public class ResultMakerFilterablesListen : SdkModel 
{
  /// The name of a dashboard filter to listen to.
  public string? dashboard_filter_name { get; set; } = null;
  /// The name of the field in the filterable to filter with the value of the dashboard filter.
  public string? field { get; set; } = null;
}

public class ResultMakerWithIdVisConfigAndDynamicFields : SdkModel 
{
  /// Unique Id. (read-only)
  public long? id { get; set; } = null;
  /// JSON string of dynamic field information. (read-only)
  public string? dynamic_fields { get; set; } = null;
  /// array of items that can be filtered and information about them. (read-only)
  public ResultMakerFilterables[]? filterables { get; set; } = null;
  /// Sorts of the constituent Look, Query, or Merge Query (read-only)
  public string[]? sorts { get; set; } = null;
  /// ID of merge result if this is a merge_result. (read-only)
  public string? merge_result_id { get; set; } = null;
  /// Total of the constituent Look, Query, or Merge Query (read-only)
  public bool? total { get; set; } = null;
  /// ID of query if this is a query. (read-only)
  public long? query_id { get; set; } = null;
  /// ID of SQL Query if this is a SQL Runner Query (read-only)
  public string? sql_query_id { get; set; } = null;
  public Query? query { get; set; }
  /// Vis config of the constituent Query, or Merge Query. (read-only)
  public StringDictionary<string>? vis_config { get; set; } = null;
}

public class Role : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Name of Role
  public string? name { get; set; } = null;
  public PermissionSet? permission_set { get; set; }
  /// (Write-Only) Id of permission set
  public long? permission_set_id { get; set; } = null;
  public ModelSet? model_set { get; set; }
  /// (Write-Only) Id of model set
  public long? model_set_id { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
  /// Link to get list of users with this role (read-only)
  public Url? users_url { get; set; } = null;
}

public class RunningQueries : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  public UserPublic? user { get; set; }
  public Query? query { get; set; }
  public SqlQuery? sql_query { get; set; }
  public LookBasic? look { get; set; }
  /// Date/Time Query was initiated (read-only)
  public string? created_at { get; set; } = null;
  /// Date/Time Query was completed (read-only)
  public string? completed_at { get; set; } = null;
  /// Query Id (read-only)
  public string? query_id { get; set; } = null;
  /// Source (look, dashboard, queryrunner, explore, etc.) (read-only)
  public string? source { get; set; } = null;
  /// Node Id (read-only)
  public string? node_id { get; set; } = null;
  /// Slug (read-only)
  public string? slug { get; set; } = null;
  /// ID of a Query Task (read-only)
  public string? query_task_id { get; set; } = null;
  /// Cache Key (read-only)
  public string? cache_key { get; set; } = null;
  /// Connection (read-only)
  public string? connection_name { get; set; } = null;
  /// Dialect (read-only)
  public string? dialect { get; set; } = null;
  /// Connection ID (read-only)
  public string? connection_id { get; set; } = null;
  /// Additional Information(Error message or verbose status) (read-only)
  public string? message { get; set; } = null;
  /// Status description (read-only)
  public string? status { get; set; } = null;
  /// Number of seconds elapsed running the Query (read-only)
  public double? runtime { get; set; } = null;
  /// SQL text of the query as run (read-only)
  public string? sql { get; set; } = null;
}

public class SamlConfig : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Enable/Disable Saml authentication for the server
  public bool? enabled { get; set; } = null;
  /// Identity Provider Certificate (provided by IdP)
  public string? idp_cert { get; set; } = null;
  /// Identity Provider Url (provided by IdP)
  public string? idp_url { get; set; } = null;
  /// Identity Provider Issuer (provided by IdP)
  public string? idp_issuer { get; set; } = null;
  /// Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
  public string? idp_audience { get; set; } = null;
  /// Count of seconds of clock drift to allow when validating timestamps of assertions.
  public long? allowed_clock_drift { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  public string? new_user_migration_types { get; set; } = null;
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// Slug to identify configurations that are created in order to run a Saml config test (read-only)
  public string? test_slug { get; set; } = null;
  /// When this config was last modified (read-only)
  public string? modified_at { get; set; } = null;
  /// User id of user who last modified this config (read-only)
  public string? modified_by { get; set; } = null;
  /// (Read-only) Roles that will be applied to new users the first time they login via Saml (read-only)
  public Role[]? default_new_user_roles { get; set; } = null;
  /// (Read-only) Groups that will be applied to new users the first time they login via Saml (read-only)
  public Group[]? default_new_user_groups { get; set; } = null;
  /// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// Set user roles in Looker based on groups from Saml
  public bool? set_roles_from_groups { get; set; } = null;
  /// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  public string? groups_attribute { get; set; } = null;
  /// (Read-only) Array of mappings between Saml Groups and Looker Roles (read-only)
  public SamlGroupRead[]? groups { get; set; } = null;
  /// (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
  public SamlGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in Saml if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// (Read-only) Array of mappings between Saml User Attributes and Looker User Attributes (read-only)
  public SamlUserAttributeRead[]? user_attributes { get; set; } = null;
  /// (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
  public SamlUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
  public string? groups_finder_type { get; set; } = null;
  /// Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
  public string? groups_member_value { get; set; } = null;
  /// Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
  public bool? bypass_login_page { get; set; } = null;
  /// Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// SAML auth'd users will inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to SAML auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class SamlGroupRead : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker (read-only)
  public string? looker_group_name { get; set; } = null;
  /// Name of group in Saml (read-only)
  public string? name { get; set; } = null;
  /// Looker Roles (read-only)
  public Role[]? roles { get; set; } = null;
  /// Link to saml config (read-only)
  public Url? url { get; set; } = null;
}

public class SamlGroupWrite : SdkModel 
{
  /// Unique Id
  public long? id { get; set; } = null;
  /// Unique Id of group in Looker (read-only)
  public long? looker_group_id { get; set; } = null;
  /// Name of group in Looker
  public string? looker_group_name { get; set; } = null;
  /// Name of group in Saml
  public string? name { get; set; } = null;
  /// Looker Role Ids
  public long[]? role_ids { get; set; } = null;
  /// Link to saml config (read-only)
  public Url? url { get; set; } = null;
}

public class SamlMetadataParseResult : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Identify Provider Issuer (read-only)
  public string? idp_issuer { get; set; } = null;
  /// Identify Provider Url (read-only)
  public string? idp_url { get; set; } = null;
  /// Identify Provider Certificate (read-only)
  public string? idp_cert { get; set; } = null;
}

public class SamlUserAttributeRead : SdkModel 
{
  /// Name of User Attribute in Saml (read-only)
  public string? name { get; set; } = null;
  /// Required to be in Saml assertion for login to be allowed to succeed (read-only)
  public bool? required { get; set; } = null;
  /// Looker User Attributes (read-only)
  public UserAttribute[]? user_attributes { get; set; } = null;
  /// Link to saml config (read-only)
  public Url? url { get; set; } = null;
}

public class SamlUserAttributeWrite : SdkModel 
{
  /// Name of User Attribute in Saml
  public string? name { get; set; } = null;
  /// Required to be in Saml assertion for login to be allowed to succeed
  public bool? required { get; set; } = null;
  /// Looker User Attribute Ids
  public long[]? user_attribute_ids { get; set; } = null;
  /// Link to saml config (read-only)
  public Url? url { get; set; } = null;
}

public class ScheduledPlan : SdkModel 
{
  /// Name of this scheduled plan
  public string? name { get; set; } = null;
  /// User Id which owns this scheduled plan
  public long? user_id { get; set; } = null;
  /// Whether schedule is run as recipient (only applicable for email recipients)
  public bool? run_as_recipient { get; set; } = null;
  /// Whether the ScheduledPlan is enabled
  public bool? enabled { get; set; } = null;
  /// Id of a look
  public long? look_id { get; set; } = null;
  /// Id of a dashboard
  public long? dashboard_id { get; set; } = null;
  /// Id of a LookML dashboard
  public string? lookml_dashboard_id { get; set; } = null;
  /// Query string to run look or dashboard with
  public string? filters_string { get; set; } = null;
  /// (DEPRECATED) Alias for filters_string field
  public string? dashboard_filters { get; set; } = null;
  /// Delivery should occur if running the dashboard or look returns results
  public bool? require_results { get; set; } = null;
  /// Delivery should occur if the dashboard look does not return results
  public bool? require_no_results { get; set; } = null;
  /// Delivery should occur if data have changed since the last run
  public bool? require_change { get; set; } = null;
  /// Will run an unlimited query and send all results.
  public bool? send_all_results { get; set; } = null;
  /// Vixie-Style crontab specification when to run
  public string? crontab { get; set; } = null;
  /// Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
  public string? datagroup { get; set; } = null;
  /// Timezone for interpreting the specified crontab (default is Looker instance timezone)
  public string? timezone { get; set; } = null;
  /// Query id
  public string? query_id { get; set; } = null;
  /// Scheduled plan destinations
  public ScheduledPlanDestination[]? scheduled_plan_destination { get; set; } = null;
  /// Whether the plan in question should only be run once (usually for testing)
  public bool? run_once { get; set; } = null;
  /// Whether links back to Looker should be included in this ScheduledPlan
  public bool? include_links { get; set; } = null;
  /// The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
  public string? pdf_paper_size { get; set; } = null;
  /// Whether the PDF should be formatted for landscape orientation
  public bool? pdf_landscape { get; set; } = null;
  /// Whether this schedule is in an embed context or not
  public bool? embed { get; set; } = null;
  /// Color scheme of the dashboard if applicable
  public string? color_theme { get; set; } = null;
  /// Whether or not to expand table vis to full length
  public bool? long_tables { get; set; } = null;
  /// The pixel width at which we render the inline table visualizations
  public long? inline_table_width { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Date and time when ScheduledPlan was created (read-only)
  public DateTime? created_at { get; set; } = null;
  /// Date and time when ScheduledPlan was last updated (read-only)
  public DateTime? updated_at { get; set; } = null;
  /// Title (read-only)
  public string? title { get; set; } = null;
  public UserPublic? user { get; set; }
  /// When the ScheduledPlan will next run (null if running once) (read-only)
  public DateTime? next_run_at { get; set; } = null;
  /// When the ScheduledPlan was last run (read-only)
  public DateTime? last_run_at { get; set; } = null;
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
}

public class ScheduledPlanDestination : SdkModel 
{
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Id of a scheduled plan you own
  public long? scheduled_plan_id { get; set; } = null;
  /// The data format to send to the given destination. Supported formats vary by destination, but include: "txt", "csv", "inline_json", "json", "json_detail", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png"
  public string? format { get; set; } = null;
  /// Are values formatted? (containing currency symbols, digit separators, etc.
  public bool? apply_formatting { get; set; } = null;
  /// Whether visualization options are applied to the results.
  public bool? apply_vis { get; set; } = null;
  /// Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'.
  public string? address { get; set; } = null;
  /// Whether the recipient is a Looker user on the current instance (only applicable for email recipients) (read-only)
  public bool? looker_recipient { get; set; } = null;
  /// Type of the address ('email', 'webhook', 's3', or 'sftp')
  public string? type { get; set; } = null;
  /// JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.
  public string? parameters { get; set; } = null;
  /// (Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.
  public string? secret_parameters { get; set; } = null;
  /// Optional message to be included in scheduled emails
  public string? message { get; set; } = null;
}

public class Session : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// IP address of user when this session was initiated (read-only)
  public string? ip_address { get; set; } = null;
  /// User's browser type (read-only)
  public string? browser { get; set; } = null;
  /// User's Operating System (read-only)
  public string? operating_system { get; set; } = null;
  /// City component of user location (derived from IP address) (read-only)
  public string? city { get; set; } = null;
  /// State component of user location (derived from IP address) (read-only)
  public string? state { get; set; } = null;
  /// Country component of user location (derived from IP address) (read-only)
  public string? country { get; set; } = null;
  /// Type of credentials used for logging in this session (read-only)
  public string? credentials_type { get; set; } = null;
  /// Time when this session was last extended by the user (read-only)
  public string? extended_at { get; set; } = null;
  /// Number of times this session was extended (read-only)
  public long? extended_count { get; set; } = null;
  /// Actual user in the case when this session represents one user sudo'ing as another (read-only)
  public long? sudo_user_id { get; set; } = null;
  /// Time when this session was initiated (read-only)
  public string? created_at { get; set; } = null;
  /// Time when this session will expire (read-only)
  public string? expires_at { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class SessionConfig : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Allow users to have persistent sessions when they login
  public bool? allow_persistent_sessions { get; set; } = null;
  /// Number of minutes for user sessions.  Must be between 5 and 43200
  public long? session_minutes { get; set; } = null;
  /// Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
  public bool? unlimited_sessions_per_user { get; set; } = null;
  /// Enforce session logout for sessions that are inactive for 15 minutes.
  public bool? use_inactivity_based_logout { get; set; } = null;
  /// Track location of session when user logs in.
  public bool? track_session_location { get; set; } = null;
}

public class Snippet : SdkModel 
{
  /// Name of the snippet (read-only)
  public string? name { get; set; } = null;
  /// Label of the snippet (read-only)
  public string? label { get; set; } = null;
  /// SQL text of the snippet (read-only)
  public string? sql { get; set; } = null;
}

public class SqlQuery : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The identifier of the SQL query (read-only)
  public string? slug { get; set; } = null;
  /// Number of seconds this query took to run the most recent time it was run (read-only)
  public float? last_runtime { get; set; } = null;
  /// Number of times this query has been run (read-only)
  public long? run_count { get; set; } = null;
  /// Maximum number of rows this query will display on the SQL Runner page (read-only)
  public long? browser_limit { get; set; } = null;
  /// SQL query text (read-only)
  public string? sql { get; set; } = null;
  /// The most recent time this query was run (read-only)
  public string? last_run_at { get; set; } = null;
  public DBConnectionBase? connection { get; set; }
  /// Model name this query uses (read-only)
  public string? model_name { get; set; } = null;
  public UserPublic? creator { get; set; }
  /// Explore page URL for this SQL query (read-only)
  public string? explore_url { get; set; } = null;
  /// Should this query be rendered as plain text (read-only)
  public bool? plaintext { get; set; } = null;
  /// Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  public StringDictionary<object>? vis_config { get; set; } = null;
  /// ID of the ResultMakerLookup entry.
  public long? result_maker_id { get; set; } = null;
}

public class SqlQueryCreate : SdkModel 
{
  /// Name of the db connection on which to run this query
  public string? connection_name { get; set; } = null;
  /// (DEPRECATED) Use `connection_name` instead
  public string? connection_id { get; set; } = null;
  /// Name of LookML Model (this or `connection_id` required)
  public string? model_name { get; set; } = null;
  /// SQL query
  public string? sql { get; set; } = null;
  /// Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  public StringDictionary<object>? vis_config { get; set; } = null;
}

public class Theme : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Timestamp for when this theme becomes active. Null=always
  public DateTime? begin_at { get; set; } = null;
  /// Timestamp for when this theme expires. Null=never
  public DateTime? end_at { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Name of theme. Can only be alphanumeric and underscores.
  public string? name { get; set; } = null;
  public ThemeSettings? settings { get; set; }
}

public class ThemeSettings : SdkModel 
{
  /// Default background color
  public string? background_color { get; set; } = null;
  /// Base font size for scaling fonts
  public string? base_font_size { get; set; } = null;
  /// Optional. ID of color collection to use with the theme. Use an empty string for none.
  public string? color_collection_id { get; set; } = null;
  /// Default font color
  public string? font_color { get; set; } = null;
  /// Primary font family
  public string? font_family { get; set; } = null;
  /// Source specification for font
  public string? font_source { get; set; } = null;
  /// Info button color
  public string? info_button_color { get; set; } = null;
  /// Primary button color
  public string? primary_button_color { get; set; } = null;
  /// Toggle to show filters. Defaults to true.
  public bool? show_filters_bar { get; set; } = null;
  /// Toggle to show the title. Defaults to true.
  public bool? show_title { get; set; } = null;
  /// Text color for text tiles
  public string? text_tile_text_color { get; set; } = null;
  /// Background color for tiles
  public string? tile_background_color { get; set; } = null;
  /// Text color for tiles
  public string? tile_text_color { get; set; } = null;
  /// Color for titles
  public string? title_color { get; set; } = null;
  /// Warning button color
  public string? warn_button_color { get; set; } = null;
  /// The text alignment of tile titles (New Dashboards)
  public string? tile_title_alignment { get; set; } = null;
  /// Toggles the tile shadow (New Dashboards)
  public bool? tile_shadow { get; set; } = null;
}

public class Timezone : SdkModel 
{
  /// Timezone (read-only)
  public string? value { get; set; } = null;
  /// Description of timezone (read-only)
  public string? label { get; set; } = null;
  /// Timezone group (e.g Common, Other, etc.) (read-only)
  public string? group { get; set; } = null;
}

public class UpdateFolder : SdkModel 
{
  /// Unique Name
  public string? name { get; set; } = null;
  /// Id of Parent. If the parent id is null, this is a root-level entry
  public string? parent_id { get; set; } = null;
}

public class User : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// URL for the avatar image (may be generic) (read-only)
  public Url? avatar_url { get; set; } = null;
  /// URL for the avatar image (may be generic), does not specify size (read-only)
  public Url? avatar_url_without_sizing { get; set; } = null;
  /// API 3 credentials (read-only)
  public CredentialsApi3[]? credentials_api3 { get; set; } = null;
  public CredentialsEmail? credentials_email { get; set; }
  /// Embed credentials (read-only)
  public CredentialsEmbed[]? credentials_embed { get; set; } = null;
  public CredentialsGoogle? credentials_google { get; set; }
  public CredentialsLDAP? credentials_ldap { get; set; }
  public CredentialsLookerOpenid? credentials_looker_openid { get; set; }
  public CredentialsOIDC? credentials_oidc { get; set; }
  public CredentialsSaml? credentials_saml { get; set; }
  public CredentialsTotp? credentials_totp { get; set; }
  /// Full name for display (available only if both first_name and last_name are set) (read-only)
  public string? display_name { get; set; } = null;
  /// EMail address (read-only)
  public string? email { get; set; } = null;
  /// (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login (read-only)
  public long? embed_group_space_id { get; set; } = null;
  /// First name
  public string? first_name { get; set; } = null;
  /// Array of ids of the groups for this user (read-only)
  public long[]? group_ids { get; set; } = null;
  /// ID string for user's home folder
  public string? home_folder_id { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Account has been disabled
  public bool? is_disabled { get; set; } = null;
  /// Last name
  public string? last_name { get; set; } = null;
  /// User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
  public string? locale { get; set; } = null;
  /// Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0') (read-only)
  public string[]? looker_versions { get; set; } = null;
  /// User's dev workspace has been checked for presence of applicable production projects
  public bool? models_dir_validated { get; set; } = null;
  /// ID of user's personal folder (read-only)
  public long? personal_folder_id { get; set; } = null;
  /// User is identified as an employee of Looker (read-only)
  public bool? presumed_looker_employee { get; set; } = null;
  /// Array of ids of the roles for this user (read-only)
  public long[]? role_ids { get; set; } = null;
  /// Active sessions (read-only)
  public Session[]? sessions { get; set; } = null;
  /// Per user dictionary of undocumented state information owned by the Looker UI.
  public StringDictionary<string>? ui_state { get; set; } = null;
  /// User is identified as an employee of Looker who has been verified via Looker corporate authentication (read-only)
  public bool? verified_looker_employee { get; set; } = null;
  /// User's roles are managed by an external directory like SAML or LDAP and can not be changed directly. (read-only)
  public bool? roles_externally_managed { get; set; } = null;
  /// User can be directly assigned a role. (read-only)
  public bool? allow_direct_roles { get; set; } = null;
  /// User can be a direct member of a normal Looker group. (read-only)
  public bool? allow_normal_group_membership { get; set; } = null;
  /// User can inherit roles from a normal Looker group. (read-only)
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class UserAttribute : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Name of user attribute
  public string? name { get; set; } = null;
  /// Human-friendly label for user attribute
  public string? label { get; set; } = null;
  /// Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
  public string? type { get; set; } = null;
  /// Default value for when no value is set on the user
  public string? default_value { get; set; } = null;
  /// Attribute is a system default (read-only)
  public bool? is_system { get; set; } = null;
  /// Attribute is permanent and cannot be deleted (read-only)
  public bool? is_permanent { get; set; } = null;
  /// If true, users will not be able to view values of this attribute
  public bool? value_is_hidden { get; set; } = null;
  /// Non-admin users can see the values of their attributes and use them in filters
  public bool? user_can_view { get; set; } = null;
  /// Users can change the value of this attribute for themselves
  public bool? user_can_edit { get; set; } = null;
  /// Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
  public string? hidden_value_domain_whitelist { get; set; } = null;
}

public class UserAttributeGroupValue : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id of this group-attribute relation (read-only)
  public long? id { get; set; } = null;
  /// Id of group (read-only)
  public long? group_id { get; set; } = null;
  /// Id of user attribute (read-only)
  public long? user_attribute_id { get; set; } = null;
  /// If true, the "value" field will be null, because the attribute settings block access to this value (read-only)
  public bool? value_is_hidden { get; set; } = null;
  /// Precedence for resolving value for user (read-only)
  public long? rank { get; set; } = null;
  /// Value of user attribute for group (read-only)
  public string? value { get; set; } = null;
}

public class UserAttributeWithValue : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Name of user attribute (read-only)
  public string? name { get; set; } = null;
  /// Human-friendly label for user attribute (read-only)
  public string? label { get; set; } = null;
  /// Precedence for setting value on user (lowest wins) (read-only)
  public long? rank { get; set; } = null;
  /// Value of attribute for user
  public string? value { get; set; } = null;
  /// Id of User (read-only)
  public long? user_id { get; set; } = null;
  /// Can the user set this value (read-only)
  public bool? user_can_edit { get; set; } = null;
  /// If true, the "value" field will be null, because the attribute settings block access to this value (read-only)
  public bool? value_is_hidden { get; set; } = null;
  /// Id of User Attribute (read-only)
  public long? user_attribute_id { get; set; } = null;
  /// How user got this value for this attribute (read-only)
  public string? source { get; set; } = null;
  /// If this user attribute is hidden, whitelist of destinations to which it may be sent. (read-only)
  public string? hidden_value_domain_whitelist { get; set; } = null;
}

public class UserLoginLockout : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Hash of user's client id (read-only)
  public string? key { get; set; } = null;
  /// Authentication method for login failures (read-only)
  public string? auth_type { get; set; } = null;
  /// IP address of most recent failed attempt (read-only)
  public string? ip { get; set; } = null;
  /// User ID (read-only)
  public long? user_id { get; set; } = null;
  /// Remote ID of user if using LDAP (read-only)
  public string? remote_id { get; set; } = null;
  /// User's name (read-only)
  public string? full_name { get; set; } = null;
  /// Email address associated with the user's account (read-only)
  public string? email { get; set; } = null;
  /// Number of failures that triggered the lockout (read-only)
  public long? fail_count { get; set; } = null;
  /// Time when lockout was triggered (read-only)
  public DateTime? lockout_at { get; set; } = null;
}

public class UserPublic : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// First Name (read-only)
  public string? first_name { get; set; } = null;
  /// Last Name (read-only)
  public string? last_name { get; set; } = null;
  /// Full name for display (available only if both first_name and last_name are set) (read-only)
  public string? display_name { get; set; } = null;
  /// URL for the avatar image (may be generic) (read-only)
  public Url? avatar_url { get; set; } = null;
  /// Link to get this item (read-only)
  public Url? url { get; set; } = null;
}

public class ValidationError : SdkModel 
{
  /// Error details (read-only)
  public string message { get; set; } = "";
  /// Error detail array (read-only)
  public ValidationErrorDetail[]? errors { get; set; } = null;
  /// Documentation link (read-only)
  public Url documentation_url { get; set; } = "";
}

public class ValidationErrorDetail : SdkModel 
{
  /// Field with error (read-only)
  public string? field { get; set; } = null;
  /// Error code (read-only)
  public string? code { get; set; } = null;
  /// Error info message (read-only)
  public string? message { get; set; } = null;
  /// Documentation link (read-only)
  public Url documentation_url { get; set; } = "";
}

public class WelcomeEmailTest : SdkModel 
{
  /// The content that would be sent in the body of a custom welcome email
  public string? content { get; set; } = null;
  /// The subject that would be sent for the custom welcome email
  public string? subject { get; set; } = null;
  /// The header that would be sent in the body of a custom welcome email
  public string? header { get; set; } = null;
}

public class WhitelabelConfiguration : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// Unique Id (read-only)
  public long? id { get; set; } = null;
  /// Customer logo image. Expected base64 encoded data (write-only)
  public string? logo_file { get; set; } = null;
  /// Logo image url (read-only) (read-only)
  public string? logo_url { get; set; } = null;
  /// Custom favicon image. Expected base64 encoded data (write-only)
  public string? favicon_file { get; set; } = null;
  /// Favicon image url (read-only) (read-only)
  public string? favicon_url { get; set; } = null;
  /// Default page title
  public string? default_title { get; set; } = null;
  /// Boolean to toggle showing help menus
  public bool? show_help_menu { get; set; } = null;
  /// Boolean to toggle showing docs
  public bool? show_docs { get; set; } = null;
  /// Boolean to toggle showing email subscription options.
  public bool? show_email_sub_options { get; set; } = null;
  /// Boolean to toggle mentions of Looker in emails
  public bool? allow_looker_mentions { get; set; } = null;
  /// Boolean to toggle links to Looker in emails
  public bool? allow_looker_links { get; set; } = null;
  /// Allow subject line and email heading customization in customized emails”
  public bool? custom_welcome_email_advanced { get; set; } = null;
  /// Remove the word Looker from appearing in the account setup page
  public bool? setup_mentions { get; set; } = null;
  /// Remove Looker logo from Alerts
  public bool? alerts_logo { get; set; } = null;
  /// Remove Looker links from Alerts
  public bool? alerts_links { get; set; } = null;
  /// Remove Looker mentions in home folder page when you don’t have any items saved
  public bool? folders_mentions { get; set; } = null;
}

public class Workspace : SdkModel 
{
  /// Operations the current user is able to perform on this object (read-only)
  public StringDictionary<bool>? can { get; set; } = null;
  /// The unique id of this user workspace. Predefined workspace ids include "production" and "dev" (read-only)
  public string? id { get; set; } = null;
  /// The local state of each project in the workspace (read-only)
  public Project[]? projects { get; set; } = null;
}

/// Dynamically generated writeable type for ApiSession removes properties:
/// can, sudo_user_id
public class WriteApiSession : SdkModel 
{
  /// The id of active workspace for this session
  public string? workspace_id { get; set; } = null;
}

/// Dynamically generated writeable type for BackupConfiguration removes properties:
/// can, url
public class WriteBackupConfiguration : SdkModel 
{
  /// Type of backup: looker-s3 or custom-s3
  public string? type { get; set; } = null;
  /// Name of bucket for custom-s3 backups
  public string? custom_s3_bucket { get; set; } = null;
  /// Name of region where the bucket is located
  public string? custom_s3_bucket_region { get; set; } = null;
  /// (Write-Only) AWS S3 key used for custom-s3 backups
  public string? custom_s3_key { get; set; } = null;
  /// (Write-Only) AWS S3 secret used for custom-s3 backups
  public string? custom_s3_secret { get; set; } = null;
}

/// Dynamically generated writeable type for Board removes properties:
/// can, content_metadata_id, created_at, board_sections, id, updated_at, user_id, primary_homepage
public class WriteBoard : SdkModel 
{
  /// Date of board deletion
  public DateTime? deleted_at { get; set; } = null;
  /// Description of the board
  public string? description { get; set; } = null;
  /// ids of the board sections in the order they should be displayed
  public long[]? section_order { get; set; } = null;
  /// Title of the board
  public string? title { get; set; } = null;
}

/// Dynamically generated writeable type for BoardItem removes properties:
/// can, content_created_by, content_favorite_id, content_metadata_id, content_updated_at, description, favorite_count, id, location, title, url, view_count
public class WriteBoardItem : SdkModel 
{
  /// Dashboard to base this item on
  public long? dashboard_id { get; set; } = null;
  /// Associated Board Section
  public long? board_section_id { get; set; } = null;
  /// Look to base this item on
  public long? look_id { get; set; } = null;
  /// LookML Dashboard to base this item on
  public string? lookml_dashboard_id { get; set; } = null;
  /// An arbitrary integer representing the sort order within the section
  public long? order { get; set; } = null;
}

/// Dynamically generated writeable type for BoardSection removes properties:
/// can, created_at, board_items, id, updated_at
public class WriteBoardSection : SdkModel 
{
  /// Time at which this section was deleted.
  public DateTime? deleted_at { get; set; } = null;
  /// Description of the content found in this section.
  public string? description { get; set; } = null;
  /// Id reference to parent board
  public long? board_id { get; set; } = null;
  /// ids of the board items in the order they should be displayed
  public long[]? item_order { get; set; } = null;
  /// Name of row
  public string? title { get; set; } = null;
}

/// Dynamically generated writeable type for ColorCollection removes properties:
/// id
public class WriteColorCollection : SdkModel 
{
  /// Label of color collection
  public string? label { get; set; } = null;
  /// Array of categorical palette definitions
  public DiscretePalette[]? categoricalPalettes { get; set; } = null;
  /// Array of discrete palette definitions
  public ContinuousPalette[]? sequentialPalettes { get; set; } = null;
  /// Array of diverging palette definitions
  public ContinuousPalette[]? divergingPalettes { get; set; } = null;
}

/// Dynamically generated writeable type for Command removes properties:
/// id, author_id
public class WriteCommand : SdkModel 
{
  /// Name of the command
  public string? name { get; set; } = null;
  /// Description of the command
  public string? description { get; set; } = null;
  /// Id of the content associated with the command
  public string? linked_content_id { get; set; } = null;
  /// Name of the command Valid values are: "dashboard", "lookml_dashboard".
  public string? linked_content_type { get; set; } = null;
}

/// Dynamically generated writeable type for ContentFavorite removes properties:
/// id, look_id, dashboard_id, board_id
public class WriteContentFavorite : SdkModel 
{
  /// User Id which owns this ContentFavorite
  public long? user_id { get; set; } = null;
  /// Content Metadata Id associated with this ContentFavorite
  public long? content_metadata_id { get; set; } = null;
  public WriteLookBasic? look { get; set; }
  public WriteDashboardBase? dashboard { get; set; }
}

/// Dynamically generated writeable type for ContentMeta removes properties:
/// can, id, name, parent_id, dashboard_id, look_id, folder_id, content_type, inheriting_id, slug
public class WriteContentMeta : SdkModel 
{
  /// Whether content inherits its access levels from parent
  public bool? inherits { get; set; } = null;
}

/// Dynamically generated writeable type for CreateDashboardFilter removes properties:
/// id, field
public class WriteCreateDashboardFilter : SdkModel 
{
  /// Id of Dashboard
  public string dashboard_id { get; set; } = "";
  /// Name of filter
  public string name { get; set; } = "";
  /// Title of filter
  public string title { get; set; } = "";
  /// Type of filter: one of date, number, string, or field
  public string type { get; set; } = "";
  /// Default value of filter
  public string? default_value { get; set; } = null;
  /// Model of filter (required if type = field)
  public string? model { get; set; } = null;
  /// Explore of filter (required if type = field)
  public string? explore { get; set; } = null;
  /// Dimension of filter (required if type = field)
  public string? dimension { get; set; } = null;
  /// Display order of this filter relative to other filters
  public long? row { get; set; } = null;
  /// Array of listeners for faceted filters
  public string[]? listens_to_filters { get; set; } = null;
  /// Whether the filter allows multiple filter values
  public bool? allow_multiple_values { get; set; } = null;
  /// Whether the filter requires a value to run the dashboard
  public bool? required { get; set; } = null;
  /// The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  public StringDictionary<object>? ui_config { get; set; } = null;
}

/// Dynamically generated writeable type for CreateQueryTask removes properties:
/// can
public class WriteCreateQueryTask : SdkModel 
{
  /// Id of query to run
  public long query_id { get; set; }
  /// Desired async query result format. Valid values are: "inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml".
  public string result_format { get; set; } = "";
  /// Source of query task
  public string? source { get; set; } = null;
  /// Create the task but defer execution
  public bool? deferred { get; set; } = null;
  /// Id of look associated with query.
  public long? look_id { get; set; } = null;
  /// Id of dashboard associated with query.
  public string? dashboard_id { get; set; } = null;
}

/// Dynamically generated writeable type for CredentialsEmail removes properties:
/// can, created_at, is_disabled, logged_in_at, password_reset_url, type, url, user_url
public class WriteCredentialsEmail : SdkModel 
{
  /// EMail address used for user login
  public string? email { get; set; } = null;
  /// Force the user to change their password upon their next login
  public bool? forced_password_reset_at_next_login { get; set; } = null;
}

/// Dynamically generated writeable type for CustomWelcomeEmail removes properties:
/// can
public class WriteCustomWelcomeEmail : SdkModel 
{
  /// If true, custom email content will replace the default body of welcome emails
  public bool? enabled { get; set; } = null;
  /// The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.
  public string? content { get; set; } = null;
  /// The text to appear in the email subject line.
  public string? subject { get; set; } = null;
  /// The text to appear in the header line of the email body.
  public string? header { get; set; } = null;
}

/// Dynamically generated writeable type for Dashboard removes properties:
/// can, content_favorite_id, content_metadata_id, id, model, readonly, refresh_interval_to_i, user_id, created_at, dashboard_elements, dashboard_filters, dashboard_layouts, deleted_at, deleter_id, edit_uri, favorite_count, last_accessed_at, last_viewed_at, view_count
public class WriteDashboard : SdkModel 
{
  /// Description
  public string? description { get; set; } = null;
  /// Is Hidden
  public bool? hidden { get; set; } = null;
  /// Timezone in which the Dashboard will run by default.
  public string? query_timezone { get; set; } = null;
  /// Refresh Interval, as a time duration phrase like "2 hours 30 minutes". A number with no time units will be interpreted as whole seconds.
  public string? refresh_interval { get; set; } = null;
  public WriteFolderBase? folder { get; set; }
  /// Dashboard Title
  public string? title { get; set; } = null;
  /// Background color
  public string? background_color { get; set; } = null;
  /// Enables crossfiltering in dashboards - only available in dashboards-next (beta)
  public bool? crossfilter_enabled { get; set; } = null;
  /// Whether or not a dashboard is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// configuration option that governs how dashboard loading will happen.
  public string? load_configuration { get; set; } = null;
  /// Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
  public string? lookml_link_id { get; set; } = null;
  /// Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)
  public bool? show_filters_bar { get; set; } = null;
  /// Show title
  public bool? show_title { get; set; } = null;
  /// Content Metadata Slug
  public string? slug { get; set; } = null;
  /// Id of folder
  public string? folder_id { get; set; } = null;
  /// Color of text on text tiles
  public string? text_tile_text_color { get; set; } = null;
  /// Tile background color
  public string? tile_background_color { get; set; } = null;
  /// Tile text color
  public string? tile_text_color { get; set; } = null;
  /// Title color
  public string? title_color { get; set; } = null;
  public DashboardAppearance? appearance { get; set; }
  /// The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
  public string? preferred_viewer { get; set; } = null;
}

/// Dynamically generated writeable type for DashboardBase removes properties:
/// can, content_favorite_id, content_metadata_id, description, hidden, id, model, query_timezone, readonly, refresh_interval, refresh_interval_to_i, title, user_id
public class WriteDashboardBase : SdkModel 
{
  public WriteFolderBase? folder { get; set; }
}

/// Dynamically generated writeable type for DashboardElement removes properties:
/// can, body_text_as_html, edit_uri, id, lookml_link_id, note_text_as_html, refresh_interval_to_i, alert_count, title_text_as_html, subtitle_text_as_html
public class WriteDashboardElement : SdkModel 
{
  /// Text tile body text
  public string? body_text { get; set; } = null;
  /// Id of Dashboard
  public string? dashboard_id { get; set; } = null;
  public WriteLookWithQuery? look { get; set; }
  /// Id Of Look
  public string? look_id { get; set; } = null;
  /// ID of merge result
  public string? merge_result_id { get; set; } = null;
  /// Note Display
  public string? note_display { get; set; } = null;
  /// Note State
  public string? note_state { get; set; } = null;
  /// Note Text
  public string? note_text { get; set; } = null;
  public WriteQuery? query { get; set; }
  /// Id Of Query
  public long? query_id { get; set; } = null;
  /// Refresh Interval
  public string? refresh_interval { get; set; } = null;
  public WriteResultMakerWithIdVisConfigAndDynamicFields? result_maker { get; set; }
  /// ID of the ResultMakerLookup entry.
  public long? result_maker_id { get; set; } = null;
  /// Text tile subtitle text
  public string? subtitle_text { get; set; } = null;
  /// Title of dashboard element
  public string? title { get; set; } = null;
  /// Whether title is hidden
  public bool? title_hidden { get; set; } = null;
  /// Text tile title
  public string? title_text { get; set; } = null;
  /// Type
  public string? type { get; set; } = null;
}

/// Dynamically generated writeable type for DashboardFilter removes properties:
/// can, id, dashboard_id, field
public class WriteDashboardFilter : SdkModel 
{
  /// Name of filter
  public string? name { get; set; } = null;
  /// Title of filter
  public string? title { get; set; } = null;
  /// Type of filter: one of date, number, string, or field
  public string? type { get; set; } = null;
  /// Default value of filter
  public string? default_value { get; set; } = null;
  /// Model of filter (required if type = field)
  public string? model { get; set; } = null;
  /// Explore of filter (required if type = field)
  public string? explore { get; set; } = null;
  /// Dimension of filter (required if type = field)
  public string? dimension { get; set; } = null;
  /// Display order of this filter relative to other filters
  public long? row { get; set; } = null;
  /// Array of listeners for faceted filters
  public string[]? listens_to_filters { get; set; } = null;
  /// Whether the filter allows multiple filter values
  public bool? allow_multiple_values { get; set; } = null;
  /// Whether the filter requires a value to run the dashboard
  public bool? required { get; set; } = null;
  /// The visual configuration for this filter. Used to set up how the UI for this filter should appear.
  public StringDictionary<object>? ui_config { get; set; } = null;
}

/// Dynamically generated writeable type for DashboardLayout removes properties:
/// can, id, deleted, dashboard_title, dashboard_layout_components
public class WriteDashboardLayout : SdkModel 
{
  /// Id of Dashboard
  public string? dashboard_id { get; set; } = null;
  /// Type
  public string? type { get; set; } = null;
  /// Is Active
  public bool? active { get; set; } = null;
  /// Column Width
  public long? column_width { get; set; } = null;
  /// Width
  public long? width { get; set; } = null;
}

/// Dynamically generated writeable type for DashboardLayoutComponent removes properties:
/// can, id, deleted, element_title, element_title_hidden, vis_type
public class WriteDashboardLayoutComponent : SdkModel 
{
  /// Id of Dashboard Layout
  public string? dashboard_layout_id { get; set; } = null;
  /// Id Of Dashboard Element
  public string? dashboard_element_id { get; set; } = null;
  /// Row
  public long? row { get; set; } = null;
  /// Column
  public long? column { get; set; } = null;
  /// Width
  public long? width { get; set; } = null;
  /// Height
  public long? height { get; set; } = null;
}

/// Dynamically generated writeable type for Datagroup removes properties:
/// can, created_at, id, model_name, name, trigger_check_at, trigger_error, trigger_value
public class WriteDatagroup : SdkModel 
{
  /// UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
  public long? stale_before { get; set; } = null;
  /// UNIX timestamp at which this entry became triggered. Cannot be in the future.
  public long? triggered_at { get; set; } = null;
}

/// Dynamically generated writeable type for DBConnection removes properties:
/// can, dialect, snippets, uses_oauth, created_at, user_id, example, last_regen_at, last_reap_at, managed
public class WriteDBConnection : SdkModel 
{
  /// Name of the connection. Also used as the unique identifier
  public string? name { get; set; } = null;
  /// Host name/address of server
  public string? host { get; set; } = null;
  /// Port number on server
  public long? port { get; set; } = null;
  /// Username for server authentication
  public string? username { get; set; } = null;
  /// (Write-Only) Password for server authentication
  public string? password { get; set; } = null;
  /// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  public string? certificate { get; set; } = null;
  /// (Write-Only) Certificate keyfile type - .json or .p12
  public string? file_type { get; set; } = null;
  /// Database name
  public string? database { get; set; } = null;
  /// Time zone of database
  public string? db_timezone { get; set; } = null;
  /// Timezone to use in queries
  public string? query_timezone { get; set; } = null;
  /// Scheme name
  public string? schema { get; set; } = null;
  /// Maximum number of concurrent connection to use
  public long? max_connections { get; set; } = null;
  /// Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
  public string? max_billing_gigabytes { get; set; } = null;
  /// Use SSL/TLS when connecting to server
  public bool? ssl { get; set; } = null;
  /// Verify the SSL
  public bool? verify_ssl { get; set; } = null;
  /// Name of temporary database (if used)
  public string? tmp_db_name { get; set; } = null;
  /// Additional params to add to JDBC connection string
  public string? jdbc_additional_params { get; set; } = null;
  /// Connection Pool Timeout, in seconds
  public long? pool_timeout { get; set; } = null;
  /// (Read/Write) SQL Dialect name
  public string? dialect_name { get; set; } = null;
  /// (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
  public bool? user_db_credentials { get; set; } = null;
  /// Fields whose values map to user attribute names
  public string[]? user_attribute_fields { get; set; } = null;
  /// Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
  public string? maintenance_cron { get; set; } = null;
  /// Precache tables in the SQL Runner
  public bool? sql_runner_precache_tables { get; set; } = null;
  /// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  public string? after_connect_statements { get; set; } = null;
  public WriteDBConnectionOverride? pdt_context_override { get; set; }
  /// Maximum number of threads to use to build PDTs in parallel
  public long? pdt_concurrency { get; set; } = null;
  /// When disable_context_comment is true comment will not be added to SQL
  public bool? disable_context_comment { get; set; } = null;
}

/// Dynamically generated writeable type for DBConnectionOverride removes properties:
/// has_password
public class WriteDBConnectionOverride : SdkModel 
{
  /// Context in which to override (`pdt` is the only allowed value)
  public string? context { get; set; } = null;
  /// Host name/address of server
  public string? host { get; set; } = null;
  /// Port number on server
  public string? port { get; set; } = null;
  /// Username for server authentication
  public string? username { get; set; } = null;
  /// (Write-Only) Password for server authentication
  public string? password { get; set; } = null;
  /// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
  public string? certificate { get; set; } = null;
  /// (Write-Only) Certificate keyfile type - .json or .p12
  public string? file_type { get; set; } = null;
  /// Database name
  public string? database { get; set; } = null;
  /// Scheme name
  public string? schema { get; set; } = null;
  /// Additional params to add to JDBC connection string
  public string? jdbc_additional_params { get; set; } = null;
  /// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
  public string? after_connect_statements { get; set; } = null;
}

/// Dynamically generated writeable type for FolderBase removes properties:
/// id, content_metadata_id, created_at, creator_id, child_count, external_id, is_embed, is_embed_shared_root, is_embed_users_root, is_personal, is_personal_descendant, is_shared_root, is_users_root, can
public class WriteFolderBase : SdkModel 
{
  /// Unique Name
  public string name { get; set; } = "";
  /// Id of Parent. If the parent id is null, this is a root-level entry
  public string? parent_id { get; set; } = null;
}

/// Dynamically generated writeable type for GitBranch removes properties:
/// can, remote, remote_name, error, message, owner_name, readonly, personal, is_local, is_remote, is_production, ahead_count, behind_count, commit_at, remote_ref
public class WriteGitBranch : SdkModel 
{
  /// The short name on the local. Updating `name` results in `git checkout <new_name>`
  public string? name { get; set; } = null;
  /// The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.
  public string? @ref { get; set; } = null;
}

/// Dynamically generated writeable type for Group removes properties:
/// can, contains_current_user, external_group_id, externally_managed, id, include_by_default, user_count
public class WriteGroup : SdkModel 
{
  /// Group can be used in content access controls
  public bool? can_add_to_content_metadata { get; set; } = null;
  /// Name of group
  public string? name { get; set; } = null;
}

/// Dynamically generated writeable type for Integration removes properties:
/// can, id, integration_hub_id, label, description, supported_formats, supported_action_types, supported_formattings, supported_visualization_formattings, supported_download_settings, icon_url, uses_oauth, required_fields, delegate_oauth
public class WriteIntegration : SdkModel 
{
  /// Whether the integration is available to users.
  public bool? enabled { get; set; } = null;
  /// Array of params for the integration.
  public IntegrationParam[]? @params { get; set; } = null;
  /// Whether the integration is available to users.
  public long[]? installed_delegate_oauth_targets { get; set; } = null;
}

/// Dynamically generated writeable type for IntegrationHub removes properties:
/// can, id, label, official, fetch_error_message, has_authorization_token, legal_agreement_signed, legal_agreement_required, legal_agreement_text
public class WriteIntegrationHub : SdkModel 
{
  /// URL of the hub.
  public string? url { get; set; } = null;
  /// (Write-Only) An authorization key that will be sent to the integration hub on every request.
  public string? authorization_token { get; set; } = null;
}

/// Dynamically generated writeable type for InternalHelpResources removes properties:
/// can
public class WriteInternalHelpResources : SdkModel 
{
  /// If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker
  public bool? enabled { get; set; } = null;
}

/// Dynamically generated writeable type for InternalHelpResourcesContent removes properties:
/// can
public class WriteInternalHelpResourcesContent : SdkModel 
{
  /// Text to display in the help menu item which will display the internal help resources
  public string? organization_name { get; set; } = null;
  /// Content to be displayed in the internal help resources page/modal
  public string? markdown_content { get; set; } = null;
}

/// Dynamically generated writeable type for LDAPConfig removes properties:
/// can, default_new_user_groups, default_new_user_roles, groups, has_auth_password, modified_at, modified_by, user_attributes, url
public class WriteLDAPConfig : SdkModel 
{
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// (Write-Only)  Password for the LDAP account used to access the LDAP server
  public string? auth_password { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// Distinguished name of LDAP account used to access the LDAP server
  public string? auth_username { get; set; } = null;
  /// LDAP server hostname
  public string? connection_host { get; set; } = null;
  /// LDAP host port
  public string? connection_port { get; set; } = null;
  /// Use Transport Layer Security
  public bool? connection_tls { get; set; } = null;
  /// Do not verify peer when using TLS
  public bool? connection_tls_no_verify { get; set; } = null;
  /// (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// Enable/Disable LDAP authentication for the server
  public bool? enabled { get; set; } = null;
  /// Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
  public bool? force_no_page { get; set; } = null;
  /// Base dn for finding groups in LDAP searches
  public string? groups_base_dn { get; set; } = null;
  /// Identifier for a strategy for how Looker will search for groups in the LDAP server
  public string? groups_finder_type { get; set; } = null;
  /// LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
  public string? groups_member_attribute { get; set; } = null;
  /// Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
  public string? groups_objectclasses { get; set; } = null;
  /// LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
  public string? groups_user_attribute { get; set; } = null;
  /// (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
  public LDAPGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
  public bool? merge_new_users_by_email { get; set; } = null;
  /// Set user roles in Looker based on groups from LDAP
  public bool? set_roles_from_groups { get; set; } = null;
  /// (Write-Only)  Test LDAP user password. For ldap tests only.
  public string? test_ldap_password { get; set; } = null;
  /// (Write-Only)  Test LDAP user login id. For ldap tests only.
  public string? test_ldap_user { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// Name of user record attributes used to indicate unique record id
  public string? user_attribute_map_ldap_id { get; set; } = null;
  /// (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
  public LDAPUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// Distinguished name of LDAP node used as the base for user searches
  public string? user_bind_base_dn { get; set; } = null;
  /// (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
  public string? user_custom_filter { get; set; } = null;
  /// Name(s) of user record attributes used for matching user login id (comma separated list)
  public string? user_id_attribute_names { get; set; } = null;
  /// (Optional) Name of user record objectclass used for finding user during login id
  public string? user_objectclass { get; set; } = null;
  /// Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to LDAP auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
}

/// Dynamically generated writeable type for LegacyFeature removes properties:
/// can, id, name, description, enabled, disallowed_as_of_version, disable_on_upgrade_to_version, end_of_life_version, documentation_url, approximate_disable_date, approximate_end_of_life_date, has_disabled_on_upgrade
public class WriteLegacyFeature : SdkModel 
{
  /// Whether this feature has been enabled by a user
  public bool? enabled_locally { get; set; } = null;
}

/// Dynamically generated writeable type for LookBasic removes properties:
/// can, content_metadata_id, id, title
public class WriteLookBasic : SdkModel 
{
  /// User Id
  public long? user_id { get; set; } = null;
}

/// Dynamically generated writeable type for LookmlModel removes properties:
/// can, explores, has_content, label
public class WriteLookmlModel : SdkModel 
{
  /// Array of names of connections this model is allowed to use
  public string[]? allowed_db_connection_names { get; set; } = null;
  /// Name of the model. Also used as the unique identifier
  public string? name { get; set; } = null;
  /// Name of project containing the model
  public string? project_name { get; set; } = null;
  /// Is this model allowed to use all current and future connections
  public bool? unlimited_db_connections { get; set; } = null;
}

/// Dynamically generated writeable type for LookWithQuery removes properties:
/// can, content_metadata_id, id, content_favorite_id, created_at, deleted_at, deleter_id, embed_url, excel_file_url, favorite_count, google_spreadsheet_formula, image_embed_url, last_accessed_at, last_updater_id, last_viewed_at, model, public_slug, public_url, short_url, updated_at, view_count, url
public class WriteLookWithQuery : SdkModel 
{
  /// Look Title
  public string? title { get; set; } = null;
  /// User Id
  public long? user_id { get; set; } = null;
  /// Whether or not a look is 'soft' deleted.
  public bool? deleted { get; set; } = null;
  /// Description
  public string? description { get; set; } = null;
  /// auto-run query when Look viewed
  public bool? is_run_on_load { get; set; } = null;
  /// Is Public
  public bool? @public { get; set; } = null;
  /// Query Id
  public long? query_id { get; set; } = null;
  public WriteFolderBase? folder { get; set; }
  /// Folder Id
  public string? folder_id { get; set; } = null;
  public WriteQuery? query { get; set; }
}

/// Dynamically generated writeable type for MergeQuery removes properties:
/// can, id, result_maker_id
public class WriteMergeQuery : SdkModel 
{
  /// Column Limit
  public string? column_limit { get; set; } = null;
  /// Dynamic Fields
  public string? dynamic_fields { get; set; } = null;
  /// Pivots
  public string[]? pivots { get; set; } = null;
  /// Sorts
  public string[]? sorts { get; set; } = null;
  /// Source Queries defining the results to be merged.
  public MergeQuerySourceQuery[]? source_queries { get; set; } = null;
  /// Total
  public bool? total { get; set; } = null;
  /// Visualization Config
  public StringDictionary<string>? vis_config { get; set; } = null;
}

/// Dynamically generated writeable type for ModelSet removes properties:
/// can, all_access, built_in, id, url
public class WriteModelSet : SdkModel 
{
  public string[]? models { get; set; } = null;
  /// Name of ModelSet
  public string? name { get; set; } = null;
}

/// Dynamically generated writeable type for OauthClientApp removes properties:
/// can, client_guid, tokens_invalid_before, activated_users
public class WriteOauthClientApp : SdkModel 
{
  /// The uri with which this application will receive an auth code by browser redirect.
  public string? redirect_uri { get; set; } = null;
  /// The application's display name
  public string? display_name { get; set; } = null;
  /// A description of the application that will be displayed to users
  public string? description { get; set; } = null;
  /// When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused.
  public bool? enabled { get; set; } = null;
  /// If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance
  public long? group_id { get; set; } = null;
}

/// Dynamically generated writeable type for OIDCConfig removes properties:
/// can, default_new_user_groups, default_new_user_roles, groups, modified_at, modified_by, test_slug, user_attributes, url
public class WriteOIDCConfig : SdkModel 
{
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// OpenID Provider Audience
  public string? audience { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in OIDC if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// OpenID Provider Authorization Url
  public Url? authorization_endpoint { get; set; } = null;
  /// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// Enable/Disable OIDC authentication for the server
  public bool? enabled { get; set; } = null;
  /// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  public string? groups_attribute { get; set; } = null;
  /// (Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids
  public OIDCGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// Relying Party Identifier (provided by OpenID Provider)
  public string? identifier { get; set; } = null;
  /// OpenID Provider Issuer
  public string? issuer { get; set; } = null;
  /// Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  public string? new_user_migration_types { get; set; } = null;
  /// Array of scopes to request.
  public string[]? scopes { get; set; } = null;
  /// (Write-Only) Relying Party Secret (provided by OpenID Provider)
  public string? secret { get; set; } = null;
  /// Set user roles in Looker based on groups from OIDC
  public bool? set_roles_from_groups { get; set; } = null;
  /// OpenID Provider Token Url
  public string? token_endpoint { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// (Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids
  public OIDCUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// OpenID Provider User Information Url
  public Url? userinfo_endpoint { get; set; } = null;
  /// Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// OIDC auth'd users will inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to OIDC auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
}

/// Dynamically generated writeable type for PasswordConfig removes properties:
/// can
public class WritePasswordConfig : SdkModel 
{
  /// Minimum number of characters required for a new password.  Must be between 7 and 100
  public long? min_length { get; set; } = null;
  /// Require at least one numeric character
  public bool? require_numeric { get; set; } = null;
  /// Require at least one uppercase and one lowercase letter
  public bool? require_upperlower { get; set; } = null;
  /// Require at least one special character
  public bool? require_special { get; set; } = null;
}

/// Dynamically generated writeable type for PermissionSet removes properties:
/// can, all_access, built_in, id, url
public class WritePermissionSet : SdkModel 
{
  /// Name of PermissionSet
  public string? name { get; set; } = null;
  public string[]? permissions { get; set; } = null;
}

/// Dynamically generated writeable type for Project removes properties:
/// can, id, uses_git, is_example
public class WriteProject : SdkModel 
{
  /// Project display name
  public string? name { get; set; } = null;
  /// Git remote repository url
  public string? git_remote_url { get; set; } = null;
  /// Git username for HTTPS authentication. (For production only, if using user attributes.)
  public string? git_username { get; set; } = null;
  /// (Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)
  public string? git_password { get; set; } = null;
  /// User attribute name for username in per-user HTTPS authentication.
  public string? git_username_user_attribute { get; set; } = null;
  /// User attribute name for password in per-user HTTPS authentication.
  public string? git_password_user_attribute { get; set; } = null;
  /// Name of the git service provider
  public string? git_service_name { get; set; } = null;
  /// Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)
  public long? git_application_server_http_port { get; set; } = null;
  /// Scheme that is running on application server (for PRs, file browsing, etc.) Valid values are: "http", "https".
  public string? git_application_server_http_scheme { get; set; } = null;
  /// (Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.
  public string? deploy_secret { get; set; } = null;
  /// (Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.
  public bool? unset_deploy_secret { get; set; } = null;
  /// The git pull request policy for this project. Valid values are: "off", "links", "recommended", "required".
  public string? pull_request_mode { get; set; } = null;
  /// Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository
  public bool? validation_required { get; set; } = null;
  /// If true, folders are enabled for this project
  public bool? folders_enabled { get; set; } = null;
  /// If true, advanced git release management is enabled for this project
  public bool? git_release_mgmt_enabled { get; set; } = null;
  /// Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).
  public bool? allow_warnings { get; set; } = null;
  /// Status of dependencies in your manifest & lockfile
  public string? dependency_status { get; set; } = null;
}

/// Dynamically generated writeable type for Query removes properties:
/// can, id, slug, share_url, expanded_share_url, url, has_table_calculations
public class WriteQuery : SdkModel 
{
  /// Model
  public string model { get; set; } = "";
  /// Explore Name
  public string view { get; set; } = "";
  /// Fields
  public string[]? fields { get; set; } = null;
  /// Pivots
  public string[]? pivots { get; set; } = null;
  /// Fill Fields
  public string[]? fill_fields { get; set; } = null;
  /// Filters
  public StringDictionary<string>? filters { get; set; } = null;
  /// Filter Expression
  public string? filter_expression { get; set; } = null;
  /// Sorting for the query results. Use the format `["view.field", ...]` to sort on fields in ascending order. Use the format `["view.field desc", ...]` to sort on fields in descending order. Use `["__UNSORTED__"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.
  public string[]? sorts { get; set; } = null;
  /// Limit
  public string? limit { get; set; } = null;
  /// Column Limit
  public string? column_limit { get; set; } = null;
  /// Total
  public bool? total { get; set; } = null;
  /// Raw Total
  public string? row_total { get; set; } = null;
  /// Fields on which to run subtotals
  public string[]? subtotals { get; set; } = null;
  /// Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A "type" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.
  public StringDictionary<object>? vis_config { get; set; } = null;
  /// The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over "filters". When creating a query or modifying an existing query, "filter_config" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.
  public StringDictionary<object>? filter_config { get; set; } = null;
  /// Visible UI Sections
  public string? visible_ui_sections { get; set; } = null;
  /// Dynamic Fields
  public string? dynamic_fields { get; set; } = null;
  /// Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.
  public string? client_id { get; set; } = null;
  /// Query Timezone
  public string? query_timezone { get; set; } = null;
}

/// Dynamically generated writeable type for RepositoryCredential removes properties:
/// can, id, root_project_id, remote_url, is_configured
public class WriteRepositoryCredential : SdkModel 
{
  /// Git username for HTTPS authentication.
  public string? git_username { get; set; } = null;
  /// (Write-Only) Git password for HTTPS authentication.
  public string? git_password { get; set; } = null;
  /// Public deploy key for SSH authentication.
  public string? ssh_public_key { get; set; } = null;
}

/// Dynamically generated writeable type for ResultMakerWithIdVisConfigAndDynamicFields removes properties:
/// id, dynamic_fields, filterables, sorts, merge_result_id, total, query_id, sql_query_id, vis_config
public class WriteResultMakerWithIdVisConfigAndDynamicFields : SdkModel 
{
  public WriteQuery? query { get; set; }
}

/// Dynamically generated writeable type for Role removes properties:
/// can, id, url, users_url
public class WriteRole : SdkModel 
{
  /// Name of Role
  public string? name { get; set; } = null;
  public WritePermissionSet? permission_set { get; set; }
  /// (Write-Only) Id of permission set
  public long? permission_set_id { get; set; } = null;
  public WriteModelSet? model_set { get; set; }
  /// (Write-Only) Id of model set
  public long? model_set_id { get; set; } = null;
}

/// Dynamically generated writeable type for SamlConfig removes properties:
/// can, test_slug, modified_at, modified_by, default_new_user_roles, default_new_user_groups, groups, user_attributes, url
public class WriteSamlConfig : SdkModel 
{
  /// Enable/Disable Saml authentication for the server
  public bool? enabled { get; set; } = null;
  /// Identity Provider Certificate (provided by IdP)
  public string? idp_cert { get; set; } = null;
  /// Identity Provider Url (provided by IdP)
  public string? idp_url { get; set; } = null;
  /// Identity Provider Issuer (provided by IdP)
  public string? idp_issuer { get; set; } = null;
  /// Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
  public string? idp_audience { get; set; } = null;
  /// Count of seconds of clock drift to allow when validating timestamps of assertions.
  public long? allowed_clock_drift { get; set; } = null;
  /// Name of user record attributes used to indicate email address field
  public string? user_attribute_map_email { get; set; } = null;
  /// Name of user record attributes used to indicate first name
  public string? user_attribute_map_first_name { get; set; } = null;
  /// Name of user record attributes used to indicate last name
  public string? user_attribute_map_last_name { get; set; } = null;
  /// Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
  public string? new_user_migration_types { get; set; } = null;
  /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
  public bool? alternate_email_login_allowed { get; set; } = null;
  /// (Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml
  public long[]? default_new_user_role_ids { get; set; } = null;
  /// (Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml
  public long[]? default_new_user_group_ids { get; set; } = null;
  /// Set user roles in Looker based on groups from Saml
  public bool? set_roles_from_groups { get; set; } = null;
  /// Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'
  public string? groups_attribute { get; set; } = null;
  /// (Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids
  public SamlGroupWrite[]? groups_with_role_ids { get; set; } = null;
  /// Users will not be allowed to login at all unless a role for them is found in Saml if set to true
  public bool? auth_requires_role { get; set; } = null;
  /// (Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids
  public SamlUserAttributeWrite[]? user_attributes_with_ids { get; set; } = null;
  /// Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']
  public string? groups_finder_type { get; set; } = null;
  /// Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'
  public string? groups_member_value { get; set; } = null;
  /// Bypass the login page when user authentication is required. Redirect to IdP immediately instead.
  public bool? bypass_login_page { get; set; } = null;
  /// Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
  public bool? allow_normal_group_membership { get; set; } = null;
  /// SAML auth'd users will inherit roles from non-reflected Looker groups.
  public bool? allow_roles_from_normal_groups { get; set; } = null;
  /// Allows roles to be directly assigned to SAML auth'd users.
  public bool? allow_direct_roles { get; set; } = null;
}

/// Dynamically generated writeable type for ScheduledPlan removes properties:
/// id, created_at, updated_at, title, user, next_run_at, last_run_at, can
public class WriteScheduledPlan : SdkModel 
{
  /// Name of this scheduled plan
  public string? name { get; set; } = null;
  /// User Id which owns this scheduled plan
  public long? user_id { get; set; } = null;
  /// Whether schedule is run as recipient (only applicable for email recipients)
  public bool? run_as_recipient { get; set; } = null;
  /// Whether the ScheduledPlan is enabled
  public bool? enabled { get; set; } = null;
  /// Id of a look
  public long? look_id { get; set; } = null;
  /// Id of a dashboard
  public long? dashboard_id { get; set; } = null;
  /// Id of a LookML dashboard
  public string? lookml_dashboard_id { get; set; } = null;
  /// Query string to run look or dashboard with
  public string? filters_string { get; set; } = null;
  /// (DEPRECATED) Alias for filters_string field
  public string? dashboard_filters { get; set; } = null;
  /// Delivery should occur if running the dashboard or look returns results
  public bool? require_results { get; set; } = null;
  /// Delivery should occur if the dashboard look does not return results
  public bool? require_no_results { get; set; } = null;
  /// Delivery should occur if data have changed since the last run
  public bool? require_change { get; set; } = null;
  /// Will run an unlimited query and send all results.
  public bool? send_all_results { get; set; } = null;
  /// Vixie-Style crontab specification when to run
  public string? crontab { get; set; } = null;
  /// Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)
  public string? datagroup { get; set; } = null;
  /// Timezone for interpreting the specified crontab (default is Looker instance timezone)
  public string? timezone { get; set; } = null;
  /// Query id
  public string? query_id { get; set; } = null;
  /// Scheduled plan destinations
  public ScheduledPlanDestination[]? scheduled_plan_destination { get; set; } = null;
  /// Whether the plan in question should only be run once (usually for testing)
  public bool? run_once { get; set; } = null;
  /// Whether links back to Looker should be included in this ScheduledPlan
  public bool? include_links { get; set; } = null;
  /// The size of paper the PDF should be formatted to fit. Valid values are: "letter", "legal", "tabloid", "a0", "a1", "a2", "a3", "a4", "a5".
  public string? pdf_paper_size { get; set; } = null;
  /// Whether the PDF should be formatted for landscape orientation
  public bool? pdf_landscape { get; set; } = null;
  /// Whether this schedule is in an embed context or not
  public bool? embed { get; set; } = null;
  /// Color scheme of the dashboard if applicable
  public string? color_theme { get; set; } = null;
  /// Whether or not to expand table vis to full length
  public bool? long_tables { get; set; } = null;
  /// The pixel width at which we render the inline table visualizations
  public long? inline_table_width { get; set; } = null;
}

/// Dynamically generated writeable type for SessionConfig removes properties:
/// can
public class WriteSessionConfig : SdkModel 
{
  /// Allow users to have persistent sessions when they login
  public bool? allow_persistent_sessions { get; set; } = null;
  /// Number of minutes for user sessions.  Must be between 5 and 43200
  public long? session_minutes { get; set; } = null;
  /// Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).
  public bool? unlimited_sessions_per_user { get; set; } = null;
  /// Enforce session logout for sessions that are inactive for 15 minutes.
  public bool? use_inactivity_based_logout { get; set; } = null;
  /// Track location of session when user logs in.
  public bool? track_session_location { get; set; } = null;
}

/// Dynamically generated writeable type for Theme removes properties:
/// can, id
public class WriteTheme : SdkModel 
{
  /// Timestamp for when this theme becomes active. Null=always
  public DateTime? begin_at { get; set; } = null;
  /// Timestamp for when this theme expires. Null=never
  public DateTime? end_at { get; set; } = null;
  /// Name of theme. Can only be alphanumeric and underscores.
  public string? name { get; set; } = null;
  public ThemeSettings? settings { get; set; }
}

/// Dynamically generated writeable type for User removes properties:
/// can, avatar_url, avatar_url_without_sizing, credentials_api3, credentials_embed, credentials_google, credentials_ldap, credentials_looker_openid, credentials_oidc, credentials_saml, credentials_totp, display_name, email, embed_group_space_id, group_ids, id, looker_versions, personal_folder_id, presumed_looker_employee, role_ids, sessions, verified_looker_employee, roles_externally_managed, allow_direct_roles, allow_normal_group_membership, allow_roles_from_normal_groups, url
public class WriteUser : SdkModel 
{
  public WriteCredentialsEmail? credentials_email { get; set; }
  /// First name
  public string? first_name { get; set; } = null;
  /// ID string for user's home folder
  public string? home_folder_id { get; set; } = null;
  /// Account has been disabled
  public bool? is_disabled { get; set; } = null;
  /// Last name
  public string? last_name { get; set; } = null;
  /// User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
  public string? locale { get; set; } = null;
  /// User's dev workspace has been checked for presence of applicable production projects
  public bool? models_dir_validated { get; set; } = null;
  /// Per user dictionary of undocumented state information owned by the Looker UI.
  public StringDictionary<string>? ui_state { get; set; } = null;
}

/// Dynamically generated writeable type for UserAttribute removes properties:
/// can, id, is_system, is_permanent
public class WriteUserAttribute : SdkModel 
{
  /// Name of user attribute
  public string? name { get; set; } = null;
  /// Human-friendly label for user attribute
  public string? label { get; set; } = null;
  /// Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
  public string? type { get; set; } = null;
  /// Default value for when no value is set on the user
  public string? default_value { get; set; } = null;
  /// If true, users will not be able to view values of this attribute
  public bool? value_is_hidden { get; set; } = null;
  /// Non-admin users can see the values of their attributes and use them in filters
  public bool? user_can_view { get; set; } = null;
  /// Users can change the value of this attribute for themselves
  public bool? user_can_edit { get; set; } = null;
  /// Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
  public string? hidden_value_domain_whitelist { get; set; } = null;
}

/// Dynamically generated writeable type for UserAttributeWithValue removes properties:
/// can, name, label, rank, user_id, user_can_edit, value_is_hidden, user_attribute_id, source, hidden_value_domain_whitelist
public class WriteUserAttributeWithValue : SdkModel 
{
  /// Value of attribute for user
  public string? value { get; set; } = null;
}

/// Dynamically generated writeable type for WhitelabelConfiguration removes properties:
/// can, id, logo_url, favicon_url
public class WriteWhitelabelConfiguration : SdkModel 
{
  /// Customer logo image. Expected base64 encoded data (write-only)
  public string? logo_file { get; set; } = null;
  /// Custom favicon image. Expected base64 encoded data (write-only)
  public string? favicon_file { get; set; } = null;
  /// Default page title
  public string? default_title { get; set; } = null;
  /// Boolean to toggle showing help menus
  public bool? show_help_menu { get; set; } = null;
  /// Boolean to toggle showing docs
  public bool? show_docs { get; set; } = null;
  /// Boolean to toggle showing email subscription options.
  public bool? show_email_sub_options { get; set; } = null;
  /// Boolean to toggle mentions of Looker in emails
  public bool? allow_looker_mentions { get; set; } = null;
  /// Boolean to toggle links to Looker in emails
  public bool? allow_looker_links { get; set; } = null;
  /// Allow subject line and email heading customization in customized emails”
  public bool? custom_welcome_email_advanced { get; set; } = null;
  /// Remove the word Looker from appearing in the account setup page
  public bool? setup_mentions { get; set; } = null;
  /// Remove Looker logo from Alerts
  public bool? alerts_logo { get; set; } = null;
  /// Remove Looker links from Alerts
  public bool? alerts_links { get; set; } = null;
  /// Remove Looker mentions in home folder page when you don’t have any items saved
  public bool? folders_mentions { get; set; } = null;
}

}